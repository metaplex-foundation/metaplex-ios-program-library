/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import BeetSolana
import Solana
import Beet


/**
* Arguments used to create {@link Freezeescrow}
* @category Accounts
* @category generated
*/
public protocol FreezeescrowArgs {
    var freezeEscrowDiscriminator: [UInt8] { get }
     var candyGuard: PublicKey { get }
     var candyMachine: PublicKey { get }
     var frozenCount: UInt64 { get }
     var firstMintTime: COption<Int64> { get }
     var freezePeriod: Int64 { get }
     var destination: PublicKey { get }
     var authority: PublicKey { get }
}

/**
 * Holds the data for the {@link Freezeescrow} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
public struct Freezeescrow: FreezeescrowArgs {
  public static let freezeEscrowDiscriminator = [227, 186, 40, 152, 7, 174, 131, 184] as [UInt8]

  public let freezeEscrowDiscriminator: [UInt8]
  public let candyGuard: PublicKey
  public let candyMachine: PublicKey
  public let frozenCount: UInt64
  public let firstMintTime: COption<Int64>
  public let freezePeriod: Int64
  public let destination: PublicKey
  public let authority: PublicKey

  /**
   * Creates a {@link Freezeescrow} instance from the provided args.
   */
  public static func fromArgs(args: Args) -> Freezeescrow {
    return Freezeescrow(
        freezeEscrowDiscriminator: args["accountDiscriminator"] as! [UInt8],
        candyGuard: args["candyGuard"] as! PublicKey,
        candyMachine: args["candyMachine"] as! PublicKey,
        frozenCount: args["frozenCount"] as! UInt64,
        firstMintTime: args["firstMintTime"] as! COption<Int64>,
        freezePeriod: args["freezePeriod"] as! Int64,
        destination: args["destination"] as! PublicKey,
        authority: args["authority"] as! PublicKey
    )
  }
  /**
   * Deserializes the {@link Freezeescrow} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func fromAccountInfo(
    accountInfo: Foundation.Data,
    offset:Int=0
  ) -> ( Freezeescrow, Int )  {
    return Freezeescrow.deserialize(buf: accountInfo, offset: offset)
  }
  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Freezeescrow} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  public static func fromAccountAddress(
    connection: Api,
    address: PublicKey,
    onComplete: @escaping (Result<Freezeescrow, Error>) -> Void
  ) {
    connection.getAccountInfo(account: address.base58EncodedString) { result in
        switch result {
            case .success(let pureData):
                if let data = pureData.data?.value {
                    onComplete(.success(Freezeescrow.deserialize(buf: data).0))
                } else {
                    onComplete(.failure(SolanaError.nullValue))
                }
            case .failure(let error):
                onComplete(.failure(error))
        }
    }
  }
  /**
   * Deserializes the {@link Freezeescrow} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func deserialize(
    buf: Foundation.Data,
    offset: Int = 0
  ) -> ( Freezeescrow, Int ) {
    return freezeEscrowBeet.deserialize(buffer: buf, offset: offset)
  }
  /**
   * Serializes the {@link Freezeescrow} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  public func serialize() -> ( Foundation.Data, Int ) {
    return freezeEscrowBeet.serialize(instance: [
        "freezeEscrowDiscriminator" : self.freezeEscrowDiscriminator,
        "candyGuard" : self.candyGuard,
        "candyMachine" : self.candyMachine,
        "frozenCount" : self.frozenCount,
        "firstMintTime" : self.firstMintTime,
        "freezePeriod" : self.freezePeriod,
        "destination" : self.destination,
        "authority" : self.authority
        ])
  }
  /**
* Returns the byteSize of a {@link Buffer} holding the serialized data of
* {@link Freezeescrow} for the provided args.
*
* @param args need to be provided since the byte size for this account
* depends on them
*/
static func byteSize(args: FreezeescrowArgs) -> UInt64 {
    return UInt64(freezeEscrowBeet.toFixedFromValue(val: args).byteSize)
}
/**
* Fetches the minimum balance needed to exempt an account holding
* {@link Freezeescrow} data from rent
*
* @param args need to be provided since the byte size for this account
* depends on them
* @param connection used to retrieve the rent exemption information
*/
static func getMinimumBalanceForRentExemption(
    args: FreezeescrowArgs,
    connection: Api,
    commitment: Commitment?,
    onComplete: @escaping(Result<UInt64, Error>) -> Void
) {
    return connection.getMinimumBalanceForRentExemption(dataLength: Freezeescrow.byteSize(args: args), commitment: commitment, onComplete: onComplete)
}
}
  /**
   * @category Accounts
   * @category generated
   */
  public let freezeEscrowBeet = FixableBeetStruct<Freezeescrow>(
    fields:[
        ("accountDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("candyGuard", Beet.fixedBeet(.init(value: .scalar(BeetPublicKey())))),
        ("candyMachine", Beet.fixedBeet(.init(value: .scalar(BeetPublicKey())))),
        ("frozenCount", Beet.fixedBeet(.init(value: .scalar(u64())))),
        ("firstMintTime", Beet.fixableBeat(coption(inner: Beet.fixedBeet(.init(value: .scalar(i64())))))),
        ("freezePeriod", Beet.fixedBeet(.init(value: .scalar(i64())))),
        ("destination", Beet.fixedBeet(.init(value: .scalar(BeetPublicKey())))),
        ("authority", Beet.fixedBeet(.init(value: .scalar(BeetPublicKey()))))
    ],
    construct: Freezeescrow.fromArgs,
    description: "Freezeescrow"
)
