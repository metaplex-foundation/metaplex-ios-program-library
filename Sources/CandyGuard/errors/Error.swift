/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation

public enum candy_guardError: String, Error {
    /**
 * InvalidAccountSize: '0x1770'
 *
 * @category Errors
 * @category generated
 */
    case invalidAccountSizeError = "0x1770"
    /**
 * DeserializationError: '0x1771'
 *
 * @category Errors
 * @category generated
 */
    case deserializationErrorError = "0x1771"
    /**
 * PublicKeyMismatch: '0x1772'
 *
 * @category Errors
 * @category generated
 */
    case publicKeyMismatchError = "0x1772"
    /**
 * DataIncrementLimitExceeded: '0x1773'
 *
 * @category Errors
 * @category generated
 */
    case dataIncrementLimitExceededError = "0x1773"
    /**
 * IncorrectOwner: '0x1774'
 *
 * @category Errors
 * @category generated
 */
    case incorrectOwnerError = "0x1774"
    /**
 * Uninitialized: '0x1775'
 *
 * @category Errors
 * @category generated
 */
    case uninitializedError = "0x1775"
    /**
 * MissingRemainingAccount: '0x1776'
 *
 * @category Errors
 * @category generated
 */
    case missingRemainingAccountError = "0x1776"
    /**
 * NumericalOverflowError: '0x1777'
 *
 * @category Errors
 * @category generated
 */
    case numericalOverflowErrorError = "0x1777"
    /**
 * RequiredGroupLabelNotFound: '0x1778'
 *
 * @category Errors
 * @category generated
 */
    case requiredGroupLabelNotFoundError = "0x1778"
    /**
 * GroupNotFound: '0x1779'
 *
 * @category Errors
 * @category generated
 */
    case groupNotFoundError = "0x1779"
    /**
 * ExceededLength: '0x177a'
 *
 * @category Errors
 * @category generated
 */
    case exceededLengthError = "0x177a"
    /**
 * CandyMachineEmpty: '0x177b'
 *
 * @category Errors
 * @category generated
 */
    case candyMachineEmptyError = "0x177b"
    /**
 * InstructionNotFound: '0x177c'
 *
 * @category Errors
 * @category generated
 */
    case instructionNotFoundError = "0x177c"
    /**
 * CollectionKeyMismatch: '0x177d'
 *
 * @category Errors
 * @category generated
 */
    case collectionKeyMismatchError = "0x177d"
    /**
 * MissingCollectionAccounts: '0x177e'
 *
 * @category Errors
 * @category generated
 */
    case missingCollectionAccountsError = "0x177e"
    /**
 * CollectionUpdateAuthorityKeyMismatch: '0x177f'
 *
 * @category Errors
 * @category generated
 */
    case collectionUpdateAuthorityKeyMismatchError = "0x177f"
    /**
 * MintNotLastTransaction: '0x1780'
 *
 * @category Errors
 * @category generated
 */
    case mintNotLastTransactionError = "0x1780"
    /**
 * MintNotLive: '0x1781'
 *
 * @category Errors
 * @category generated
 */
    case mintNotLiveError = "0x1781"
    /**
 * NotEnoughSOL: '0x1782'
 *
 * @category Errors
 * @category generated
 */
    case notEnoughSOLError = "0x1782"
    /**
 * TokenBurnFailed: '0x1783'
 *
 * @category Errors
 * @category generated
 */
    case tokenBurnFailedError = "0x1783"
    /**
 * NotEnoughTokens: '0x1784'
 *
 * @category Errors
 * @category generated
 */
    case notEnoughTokensError = "0x1784"
    /**
 * TokenTransferFailed: '0x1785'
 *
 * @category Errors
 * @category generated
 */
    case tokenTransferFailedError = "0x1785"
    /**
 * MissingRequiredSignature: '0x1786'
 *
 * @category Errors
 * @category generated
 */
    case missingRequiredSignatureError = "0x1786"
    /**
 * GatewayTokenInvalid: '0x1787'
 *
 * @category Errors
 * @category generated
 */
    case gatewayTokenInvalidError = "0x1787"
    /**
 * AfterEndDate: '0x1788'
 *
 * @category Errors
 * @category generated
 */
    case afterEndDateError = "0x1788"
    /**
 * InvalidMintTime: '0x1789'
 *
 * @category Errors
 * @category generated
 */
    case invalidMintTimeError = "0x1789"
    /**
 * AddressNotFoundInAllowedList: '0x178a'
 *
 * @category Errors
 * @category generated
 */
    case addressNotFoundInAllowedListError = "0x178a"
    /**
 * MissingAllowedListProof: '0x178b'
 *
 * @category Errors
 * @category generated
 */
    case missingAllowedListProofError = "0x178b"
    /**
 * AllowedListNotEnabled: '0x178c'
 *
 * @category Errors
 * @category generated
 */
    case allowedListNotEnabledError = "0x178c"
    /**
 * AllowedMintLimitReached: '0x178d'
 *
 * @category Errors
 * @category generated
 */
    case allowedMintLimitReachedError = "0x178d"
    /**
 * InvalidNftCollection: '0x178e'
 *
 * @category Errors
 * @category generated
 */
    case invalidNftCollectionError = "0x178e"
    /**
 * MissingNft: '0x178f'
 *
 * @category Errors
 * @category generated
 */
    case missingNftError = "0x178f"
    /**
 * MaximumRedeemedAmount: '0x1790'
 *
 * @category Errors
 * @category generated
 */
    case maximumRedeemedAmountError = "0x1790"
    /**
 * AddressNotAuthorized: '0x1791'
 *
 * @category Errors
 * @category generated
 */
    case addressNotAuthorizedError = "0x1791"
    /**
 * MissingFreezeInstruction: '0x1792'
 *
 * @category Errors
 * @category generated
 */
    case missingFreezeInstructionError = "0x1792"
    /**
 * FreezeGuardNotEnabled: '0x1793'
 *
 * @category Errors
 * @category generated
 */
    case freezeGuardNotEnabledError = "0x1793"
    /**
 * FreezeNotInitialized: '0x1794'
 *
 * @category Errors
 * @category generated
 */
    case freezeNotInitializedError = "0x1794"
    /**
 * MissingFreezePeriod: '0x1795'
 *
 * @category Errors
 * @category generated
 */
    case missingFreezePeriodError = "0x1795"
    /**
 * FreezeEscrowAlreadyExists: '0x1796'
 *
 * @category Errors
 * @category generated
 */
    case freezeEscrowAlreadyExistsError = "0x1796"
    /**
 * ExceededMaximumFreezePeriod: '0x1797'
 *
 * @category Errors
 * @category generated
 */
    case exceededMaximumFreezePeriodError = "0x1797"
    /**
 * ThawNotEnabled: '0x1798'
 *
 * @category Errors
 * @category generated
 */
    case thawNotEnabledError = "0x1798"
    /**
 * UnlockNotEnabled: '0x1799'
 *
 * @category Errors
 * @category generated
 */
    case unlockNotEnabledError = "0x1799"
    /**
 * DuplicatedGroupLabel: '0x179a'
 *
 * @category Errors
 * @category generated
 */
    case duplicatedGroupLabelError = "0x179a"
    /**
 * DuplicatedMintLimitId: '0x179b'
 *
 * @category Errors
 * @category generated
 */
    case duplicatedMintLimitIdError = "0x179b"
    /**
 * UnauthorizedProgramFound: '0x179c'
 *
 * @category Errors
 * @category generated
 */
    case unauthorizedProgramFoundError = "0x179c"
    /**
 * ExceededProgramListSize: '0x179d'
 *
 * @category Errors
 * @category generated
 */
    case exceededProgramListSizeError = "0x179d"
    /**
 * AllocationNotInitialized: '0x179e'
 *
 * @category Errors
 * @category generated
 */
    case allocationNotInitializedError = "0x179e"
    /**
 * AllocationLimitReached: '0x179f'
 *
 * @category Errors
 * @category generated
 */
    case allocationLimitReachedError = "0x179f"
    /**
 * AllocationGuardNotEnabled: '0x17a0'
 *
 * @category Errors
 * @category generated
 */
    case allocationGuardNotEnabledError = "0x17a0"
    /**
 * InvalidMintAuthority: '0x17a1'
 *
 * @category Errors
 * @category generated
 */
    case invalidMintAuthorityError = "0x17a1"
    /**
 * InstructionBuilderFailed: '0x17a2'
 *
 * @category Errors
 * @category generated
 */
    case instructionBuilderFailedError = "0x17a2"

    public var code: String? { self.rawValue }
}

extension candy_guardError: LocalizedError {
    public var errorDescription: String? {
        switch self {
            /**
 * InvalidAccountSize: 'Could not save guard to account'
 *
 * @category Errors
 * @category generated
 */
    case .invalidAccountSizeError: return "Could not save guard to account"
    /**
 * DeserializationError: 'Could not deserialize guard'
 *
 * @category Errors
 * @category generated
 */
    case .deserializationErrorError: return "Could not deserialize guard"
    /**
 * PublicKeyMismatch: 'Public key mismatch'
 *
 * @category Errors
 * @category generated
 */
    case .publicKeyMismatchError: return "Public key mismatch"
    /**
 * DataIncrementLimitExceeded: 'Exceeded account increase limit'
 *
 * @category Errors
 * @category generated
 */
    case .dataIncrementLimitExceededError: return "Exceeded account increase limit"
    /**
 * IncorrectOwner: 'Account does not have correct owner'
 *
 * @category Errors
 * @category generated
 */
    case .incorrectOwnerError: return "Account does not have correct owner"
    /**
 * Uninitialized: 'Account is not initialized'
 *
 * @category Errors
 * @category generated
 */
    case .uninitializedError: return "Account is not initialized"
    /**
 * MissingRemainingAccount: 'Missing expected remaining account'
 *
 * @category Errors
 * @category generated
 */
    case .missingRemainingAccountError: return "Missing expected remaining account"
    /**
 * NumericalOverflowError: 'Numerical overflow error'
 *
 * @category Errors
 * @category generated
 */
    case .numericalOverflowErrorError: return "Numerical overflow error"
    /**
 * RequiredGroupLabelNotFound: 'Missing required group label'
 *
 * @category Errors
 * @category generated
 */
    case .requiredGroupLabelNotFoundError: return "Missing required group label"
    /**
 * GroupNotFound: 'Group not found'
 *
 * @category Errors
 * @category generated
 */
    case .groupNotFoundError: return "Group not found"
    /**
 * ExceededLength: 'Value exceeded maximum length'
 *
 * @category Errors
 * @category generated
 */
    case .exceededLengthError: return "Value exceeded maximum length"
    /**
 * CandyMachineEmpty: 'Candy machine is empty'
 *
 * @category Errors
 * @category generated
 */
    case .candyMachineEmptyError: return "Candy machine is empty"
    /**
 * InstructionNotFound: 'No instruction was found'
 *
 * @category Errors
 * @category generated
 */
    case .instructionNotFoundError: return "No instruction was found"
    /**
 * CollectionKeyMismatch: 'Collection public key mismatch'
 *
 * @category Errors
 * @category generated
 */
    case .collectionKeyMismatchError: return "Collection public key mismatch"
    /**
 * MissingCollectionAccounts: 'Missing collection accounts'
 *
 * @category Errors
 * @category generated
 */
    case .missingCollectionAccountsError: return "Missing collection accounts"
    /**
 * CollectionUpdateAuthorityKeyMismatch: 'Collection update authority public key mismatch'
 *
 * @category Errors
 * @category generated
 */
    case .collectionUpdateAuthorityKeyMismatchError: return "Collection update authority public key mismatch"
    /**
 * MintNotLastTransaction: 'Mint must be the last instructions of the transaction'
 *
 * @category Errors
 * @category generated
 */
    case .mintNotLastTransactionError: return "Mint must be the last instructions of the transaction"
    /**
 * MintNotLive: 'Mint is not live'
 *
 * @category Errors
 * @category generated
 */
    case .mintNotLiveError: return "Mint is not live"
    /**
 * NotEnoughSOL: 'Not enough SOL to pay for the mint'
 *
 * @category Errors
 * @category generated
 */
    case .notEnoughSOLError: return "Not enough SOL to pay for the mint"
    /**
 * TokenBurnFailed: 'Token burn failed'
 *
 * @category Errors
 * @category generated
 */
    case .tokenBurnFailedError: return "Token burn failed"
    /**
 * NotEnoughTokens: 'Not enough tokens on the account'
 *
 * @category Errors
 * @category generated
 */
    case .notEnoughTokensError: return "Not enough tokens on the account"
    /**
 * TokenTransferFailed: 'Token transfer failed'
 *
 * @category Errors
 * @category generated
 */
    case .tokenTransferFailedError: return "Token transfer failed"
    /**
 * MissingRequiredSignature: 'A signature was required but not found'
 *
 * @category Errors
 * @category generated
 */
    case .missingRequiredSignatureError: return "A signature was required but not found"
    /**
 * GatewayTokenInvalid: 'Gateway token is not valid'
 *
 * @category Errors
 * @category generated
 */
    case .gatewayTokenInvalidError: return "Gateway token is not valid"
    /**
 * AfterEndDate: 'Current time is after the set end date'
 *
 * @category Errors
 * @category generated
 */
    case .afterEndDateError: return "Current time is after the set end date"
    /**
 * InvalidMintTime: 'Current time is not within the allowed mint time'
 *
 * @category Errors
 * @category generated
 */
    case .invalidMintTimeError: return "Current time is not within the allowed mint time"
    /**
 * AddressNotFoundInAllowedList: 'Address not found on the allowed list'
 *
 * @category Errors
 * @category generated
 */
    case .addressNotFoundInAllowedListError: return "Address not found on the allowed list"
    /**
 * MissingAllowedListProof: 'Missing allowed list proof'
 *
 * @category Errors
 * @category generated
 */
    case .missingAllowedListProofError: return "Missing allowed list proof"
    /**
 * AllowedListNotEnabled: 'Allow list guard is not enabled'
 *
 * @category Errors
 * @category generated
 */
    case .allowedListNotEnabledError: return "Allow list guard is not enabled"
    /**
 * AllowedMintLimitReached: 'The maximum number of allowed mints was reached'
 *
 * @category Errors
 * @category generated
 */
    case .allowedMintLimitReachedError: return "The maximum number of allowed mints was reached"
    /**
 * InvalidNftCollection: 'Invalid NFT collection'
 *
 * @category Errors
 * @category generated
 */
    case .invalidNftCollectionError: return "Invalid NFT collection"
    /**
 * MissingNft: 'Missing NFT on the account'
 *
 * @category Errors
 * @category generated
 */
    case .missingNftError: return "Missing NFT on the account"
    /**
 * MaximumRedeemedAmount: 'Current redemeed items is at the set maximum amount'
 *
 * @category Errors
 * @category generated
 */
    case .maximumRedeemedAmountError: return "Current redemeed items is at the set maximum amount"
    /**
 * AddressNotAuthorized: 'Address not authorized'
 *
 * @category Errors
 * @category generated
 */
    case .addressNotAuthorizedError: return "Address not authorized"
    /**
 * MissingFreezeInstruction: 'Missing freeze instruction data'
 *
 * @category Errors
 * @category generated
 */
    case .missingFreezeInstructionError: return "Missing freeze instruction data"
    /**
 * FreezeGuardNotEnabled: 'Freeze guard must be enabled'
 *
 * @category Errors
 * @category generated
 */
    case .freezeGuardNotEnabledError: return "Freeze guard must be enabled"
    /**
 * FreezeNotInitialized: 'Freeze must be initialized'
 *
 * @category Errors
 * @category generated
 */
    case .freezeNotInitializedError: return "Freeze must be initialized"
    /**
 * MissingFreezePeriod: 'Missing freeze period'
 *
 * @category Errors
 * @category generated
 */
    case .missingFreezePeriodError: return "Missing freeze period"
    /**
 * FreezeEscrowAlreadyExists: 'The freeze escrow account already exists'
 *
 * @category Errors
 * @category generated
 */
    case .freezeEscrowAlreadyExistsError: return "The freeze escrow account already exists"
    /**
 * ExceededMaximumFreezePeriod: 'Maximum freeze period exceeded'
 *
 * @category Errors
 * @category generated
 */
    case .exceededMaximumFreezePeriodError: return "Maximum freeze period exceeded"
    /**
 * ThawNotEnabled: 'Thaw is not enabled'
 *
 * @category Errors
 * @category generated
 */
    case .thawNotEnabledError: return "Thaw is not enabled"
    /**
 * UnlockNotEnabled: 'Unlock is not enabled (not all NFTs are thawed)'
 *
 * @category Errors
 * @category generated
 */
    case .unlockNotEnabledError: return "Unlock is not enabled (not all NFTs are thawed)"
    /**
 * DuplicatedGroupLabel: 'Duplicated group label'
 *
 * @category Errors
 * @category generated
 */
    case .duplicatedGroupLabelError: return "Duplicated group label"
    /**
 * DuplicatedMintLimitId: 'Duplicated mint limit id'
 *
 * @category Errors
 * @category generated
 */
    case .duplicatedMintLimitIdError: return "Duplicated mint limit id"
    /**
 * UnauthorizedProgramFound: 'An unauthorized program was found in the transaction'
 *
 * @category Errors
 * @category generated
 */
    case .unauthorizedProgramFoundError: return "An unauthorized program was found in the transaction"
    /**
 * ExceededProgramListSize: 'Exceeded the maximum number of programs in the additional list'
 *
 * @category Errors
 * @category generated
 */
    case .exceededProgramListSizeError: return "Exceeded the maximum number of programs in the additional list"
    /**
 * AllocationNotInitialized: 'Allocation PDA not initialized'
 *
 * @category Errors
 * @category generated
 */
    case .allocationNotInitializedError: return "Allocation PDA not initialized"
    /**
 * AllocationLimitReached: 'Allocation limit was reached'
 *
 * @category Errors
 * @category generated
 */
    case .allocationLimitReachedError: return "Allocation limit was reached"
    /**
 * AllocationGuardNotEnabled: 'Allocation guard must be enabled'
 *
 * @category Errors
 * @category generated
 */
    case .allocationGuardNotEnabledError: return "Allocation guard must be enabled"
    /**
 * InvalidMintAuthority: 'Candy machine has an invalid mint authority'
 *
 * @category Errors
 * @category generated
 */
    case .invalidMintAuthorityError: return "Candy machine has an invalid mint authority"
    /**
 * InstructionBuilderFailed: 'Instruction could not be created'
 *
 * @category Errors
 * @category generated
 */
    case .instructionBuilderFailedError: return "Instruction could not be created"
        }
    }
}