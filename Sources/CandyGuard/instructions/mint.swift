/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
public struct MintInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let mintArgs: Data
    let label: COption<String>

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = mintInstructionDiscriminator,
        mintArgs: Data,
        label: COption<String>
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.mintArgs = mintArgs
        self.label = label
    }
}
/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
public let mintStruct = FixableBeetArgsStruct<MintInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("mintArgs", Beet.fixableBeat(Uint8Array())),
        ("label", Beet.fixableBeat(coption(inner: Beet.fixableBeat(Utf8String()))))
    ],
    description: "MintInstructionArgs"
)
/**
* Accounts required by the _mint_ instruction
*
* @property [] candyGuard  
* @property [] candyMachineProgram  
* @property [_writable_] candyMachine  
* @property [_writable_] candyMachineAuthorityPda  
* @property [_writable_, **signer**] payer  
* @property [_writable_] nftMetadata  
* @property [_writable_] nftMint  
* @property [**signer**] nftMintAuthority  
* @property [_writable_] nftMasterEdition  
* @property [] collectionAuthorityRecord  
* @property [] collectionMint  
* @property [_writable_] collectionMetadata  
* @property [] collectionMasterEdition  
* @property [] collectionUpdateAuthority  
* @property [] tokenMetadataProgram  
* @property [] recentSlothashes  
* @property [] instructionSysvarAccount   
* @category Instructions
* @category Mint
* @category generated
*/
public struct MintInstructionAccounts {
    let candyGuard: PublicKey
    let candyMachineProgram: PublicKey
    let candyMachine: PublicKey
    let candyMachineAuthorityPda: PublicKey
    let payer: PublicKey
    let nftMetadata: PublicKey
    let nftMint: PublicKey
    let nftMintAuthority: PublicKey
    let nftMasterEdition: PublicKey
    let collectionAuthorityRecord: PublicKey
    let collectionMint: PublicKey
    let collectionMetadata: PublicKey
    let collectionMasterEdition: PublicKey
    let collectionUpdateAuthority: PublicKey
    let tokenMetadataProgram: PublicKey
    let tokenProgram: PublicKey?
    let systemProgram: PublicKey?
    let recentSlothashes: PublicKey
    let instructionSysvarAccount: PublicKey

    public init(
        candyGuard: PublicKey,
        candyMachineProgram: PublicKey,
        candyMachine: PublicKey,
        candyMachineAuthorityPda: PublicKey,
        payer: PublicKey,
        nftMetadata: PublicKey,
        nftMint: PublicKey,
        nftMintAuthority: PublicKey,
        nftMasterEdition: PublicKey,
        collectionAuthorityRecord: PublicKey,
        collectionMint: PublicKey,
        collectionMetadata: PublicKey,
        collectionMasterEdition: PublicKey,
        collectionUpdateAuthority: PublicKey,
        tokenMetadataProgram: PublicKey,
        tokenProgram: PublicKey? = nil,
        systemProgram: PublicKey? = nil,
        recentSlothashes: PublicKey,
        instructionSysvarAccount: PublicKey
    ) {
        self.candyGuard = candyGuard
        self.candyMachineProgram = candyMachineProgram
        self.candyMachine = candyMachine
        self.candyMachineAuthorityPda = candyMachineAuthorityPda
        self.payer = payer
        self.nftMetadata = nftMetadata
        self.nftMint = nftMint
        self.nftMintAuthority = nftMintAuthority
        self.nftMasterEdition = nftMasterEdition
        self.collectionAuthorityRecord = collectionAuthorityRecord
        self.collectionMint = collectionMint
        self.collectionMetadata = collectionMetadata
        self.collectionMasterEdition = collectionMasterEdition
        self.collectionUpdateAuthority = collectionUpdateAuthority
        self.tokenMetadataProgram = tokenMetadataProgram
        self.tokenProgram = tokenProgram
        self.systemProgram = systemProgram
        self.recentSlothashes = recentSlothashes
        self.instructionSysvarAccount = instructionSysvarAccount
    }
}

public let mintInstructionDiscriminator = [51, 57, 225, 47, 182, 146, 137, 166] as [UInt8]

/**
* Creates a _Mint_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category Mint
* @category generated
*/
public func createMintInstruction(accounts: MintInstructionAccounts, 
args: MintInstructionArgs, programId: PublicKey=PublicKey(string: "Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")!) -> TransactionInstruction {

    let data = mintStruct.serialize(
            instance: ["instructionDiscriminator": mintInstructionDiscriminator,
"mintArgs": args.mintArgs,
  "label": args.label])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.candyGuard,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.candyMachineProgram,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.candyMachine,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.candyMachineAuthorityPda,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.nftMetadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.nftMint,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.nftMintAuthority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.nftMasterEdition,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.collectionAuthorityRecord,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionMint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionMetadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.collectionMasterEdition,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionUpdateAuthority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenMetadataProgram,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.recentSlothashes,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.instructionSysvarAccount,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}