/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category Unwrap
 * @category generated
 */
public struct UnwrapInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = unwrapInstructionDiscriminator
    ) {
        self.instructionDiscriminator = instructionDiscriminator
    }
}
/**
 * @category Instructions
 * @category Unwrap
 * @category generated
 */
public let unwrapStruct = FixableBeetArgsStruct<UnwrapInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "UnwrapInstructionArgs"
)
/**
* Accounts required by the _unwrap_ instruction
*
* @property [] candyGuard  
* @property [**signer**] authority  
* @property [_writable_] candyMachine  
* @property [**signer**] candyMachineAuthority  
* @property [] candyMachineProgram   
* @category Instructions
* @category Unwrap
* @category generated
*/
public struct UnwrapInstructionAccounts {
    let candyGuard: PublicKey
    let authority: PublicKey
    let candyMachine: PublicKey
    let candyMachineAuthority: PublicKey
    let candyMachineProgram: PublicKey

    public init(
        candyGuard: PublicKey,
        authority: PublicKey,
        candyMachine: PublicKey,
        candyMachineAuthority: PublicKey,
        candyMachineProgram: PublicKey
    ) {
        self.candyGuard = candyGuard
        self.authority = authority
        self.candyMachine = candyMachine
        self.candyMachineAuthority = candyMachineAuthority
        self.candyMachineProgram = candyMachineProgram
    }
}

public let unwrapInstructionDiscriminator = [126, 175, 198, 14, 212, 69, 50, 44] as [UInt8]

/**
* Creates a _Unwrap_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category Unwrap
* @category generated
*/
public func createUnwrapInstruction(accounts: UnwrapInstructionAccounts, 
programId: PublicKey=PublicKey(string: "Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")!) -> TransactionInstruction {

    let data = unwrapStruct.serialize(
            instance: ["instructionDiscriminator": unwrapInstructionDiscriminator ])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.candyGuard,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.candyMachine,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.candyMachineAuthority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.candyMachineProgram,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}