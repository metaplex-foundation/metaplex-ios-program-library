/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category Route
 * @category generated
 */
public struct RouteInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let args: RouteArgs
    let label: COption<String>

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = routeInstructionDiscriminator,
        args: RouteArgs,
        label: COption<String>
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.args = args
        self.label = label
    }
}
/**
 * @category Instructions
 * @category Route
 * @category generated
 */
public let routeStruct = FixableBeetArgsStruct<RouteInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("args", routeArgsBeetWrapped),
        ("label", Beet.fixableBeat(coption(inner: Beet.fixableBeat(Utf8String()))))
    ],
    description: "RouteInstructionArgs"
)
/**
* Accounts required by the _route_ instruction
*
* @property [] candyGuard  
* @property [_writable_] candyMachine  
* @property [_writable_, **signer**] payer   
* @category Instructions
* @category Route
* @category generated
*/
public struct RouteInstructionAccounts {
    let candyGuard: PublicKey
    let candyMachine: PublicKey
    let payer: PublicKey

    public init(
        candyGuard: PublicKey,
        candyMachine: PublicKey,
        payer: PublicKey
    ) {
        self.candyGuard = candyGuard
        self.candyMachine = candyMachine
        self.payer = payer
    }
}

public let routeInstructionDiscriminator = [229, 23, 203, 151, 122, 227, 173, 42] as [UInt8]

/**
* Creates a _Route_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category Route
* @category generated
*/
public func createRouteInstruction(accounts: RouteInstructionAccounts, 
args: RouteInstructionArgs, programId: PublicKey=PublicKey(string: "Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")!) -> TransactionInstruction {

    let data = routeStruct.serialize(
            instance: ["instructionDiscriminator": routeInstructionDiscriminator,
"args": args.args,
  "label": args.label])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.candyGuard,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.candyMachine,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}