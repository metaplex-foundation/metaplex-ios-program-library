/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category CreateAuctionHouse
 * @category generated
 */
public struct CreateAuctionHouseInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let bump: UInt8
    let feePayerBump: UInt8
    let treasuryBump: UInt8
    let sellerFeeBasisPoints: UInt16
    let requiresSignOff: Bool
    let canChangeSalePrice: Bool
}
/**
 * @category Instructions
 * @category CreateAuctionHouse
 * @category generated
 */
public let createAuctionHouseStruct = FixableBeetArgsStruct<CreateAuctionHouseInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("bump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("feePayerBump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("treasuryBump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("sellerFeeBasisPoints", Beet.fixedBeet(.init(value: .scalar(u16())))),
        ("requiresSignOff", Beet.fixedBeet(.init(value: .scalar(bool())))),
        ("canChangeSalePrice", Beet.fixedBeet(.init(value: .scalar(bool()))))
    ],
    description: "CreateAuctionHouseInstructionArgs"
)
/**
* Accounts required by the _createAuctionHouse_ instruction
*
* @property [] treasuryMint  
* @property [_writable_, **signer**] payer  
* @property [] authority  
* @property [_writable_] feeWithdrawalDestination  
* @property [_writable_] treasuryWithdrawalDestination  
* @property [] treasuryWithdrawalDestinationOwner  
* @property [_writable_] auctionHouse  
* @property [_writable_] auctionHouseFeeAccount  
* @property [_writable_] auctionHouseTreasury   
* @category Instructions
* @category CreateAuctionHouse
* @category generated
*/
public struct CreateAuctionHouseInstructionAccounts {
        let treasuryMint: PublicKey
        let payer: PublicKey
        let authority: PublicKey
        let feeWithdrawalDestination: PublicKey
        let treasuryWithdrawalDestination: PublicKey
        let treasuryWithdrawalDestinationOwner: PublicKey
        let auctionHouse: PublicKey
        let auctionHouseFeeAccount: PublicKey
        let auctionHouseTreasury: PublicKey
        let tokenProgram: PublicKey?
        let systemProgram: PublicKey?
        let ataProgram: PublicKey?
        let rent: PublicKey?
}

public let createAuctionHouseInstructionDiscriminator = [103, 108, 111, 98, 97, 108, 58, 99] as [UInt8]

/**
* Creates a _CreateAuctionHouse_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category CreateAuctionHouse
* @category generated
*/
public func createCreateAuctionHouseInstruction(accounts: CreateAuctionHouseInstructionAccounts, 
args: CreateAuctionHouseInstructionArgs, programId: PublicKey=PublicKey(string: "hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")!) -> TransactionInstruction {

    let data = createAuctionHouseStruct.serialize(
            instance: ["instructionDiscriminator": createAuctionHouseInstructionDiscriminator,
"bump": args.bump,
  "feePayerBump": args.feePayerBump,
  "treasuryBump": args.treasuryBump,
  "sellerFeeBasisPoints": args.sellerFeeBasisPoints,
  "requiresSignOff": args.requiresSignOff,
  "canChangeSalePrice": args.canChangeSalePrice])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.treasuryMint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.feeWithdrawalDestination,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.treasuryWithdrawalDestination,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.treasuryWithdrawalDestinationOwner,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.auctionHouse,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.auctionHouseFeeAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.auctionHouseTreasury,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.ataProgram ?? PublicKey.splAssociatedTokenAccountProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}