/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category Sell
 * @category generated
 */
public struct SellInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let tradeStateBump: UInt8
    let freeTradeStateBump: UInt8
    let programAsSignerBump: UInt8
    let buyerPrice: UInt64
    let tokenSize: UInt64
}
/**
 * @category Instructions
 * @category Sell
 * @category generated
 */
public let sellStruct = FixableBeetArgsStruct<SellInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("tradeStateBump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("freeTradeStateBump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("programAsSignerBump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("buyerPrice", Beet.fixedBeet(.init(value: .scalar(u64())))),
        ("tokenSize", Beet.fixedBeet(.init(value: .scalar(u64()))))
    ],
    description: "SellInstructionArgs"
)
/**
* Accounts required by the _sell_ instruction
*
* @property [] wallet  
* @property [_writable_] tokenAccount  
* @property [] metadata  
* @property [] authority  
* @property [] auctionHouse  
* @property [_writable_] auctionHouseFeeAccount  
* @property [_writable_] sellerTradeState  
* @property [_writable_] freeSellerTradeState  
* @property [] programAsSigner   
* @category Instructions
* @category Sell
* @category generated
*/
public struct SellInstructionAccounts {
        let wallet: PublicKey
        let tokenAccount: PublicKey
        let metadata: PublicKey
        let authority: PublicKey
        let auctionHouse: PublicKey
        let auctionHouseFeeAccount: PublicKey
        let sellerTradeState: PublicKey
        let freeSellerTradeState: PublicKey
        let tokenProgram: PublicKey?
        let systemProgram: PublicKey?
        let programAsSigner: PublicKey
        let rent: PublicKey?
}

public let sellInstructionDiscriminator = [103, 108, 111, 98, 97, 108, 58, 115] as [UInt8]

/**
* Creates a _Sell_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category Sell
* @category generated
*/
public func createSellInstruction(accounts: SellInstructionAccounts, 
args: SellInstructionArgs, programId: PublicKey=PublicKey(string: "hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")!) -> TransactionInstruction {

    let data = sellStruct.serialize(
            instance: ["instructionDiscriminator": sellInstructionDiscriminator,
"tradeStateBump": args.tradeStateBump,
  "freeTradeStateBump": args.freeTradeStateBump,
  "programAsSignerBump": args.programAsSignerBump,
  "buyerPrice": args.buyerPrice,
  "tokenSize": args.tokenSize])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.wallet,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.auctionHouse,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.auctionHouseFeeAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.sellerTradeState,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.freeSellerTradeState,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.programAsSigner,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}