/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category Buy
 * @category generated
 */
public struct BuyInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let tradeStateBump: UInt8
    let escrowPaymentBump: UInt8
    let buyerPrice: UInt64
    let tokenSize: UInt64
}
/**
 * @category Instructions
 * @category Buy
 * @category generated
 */
public let buyStruct = FixableBeetArgsStruct<BuyInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("tradeStateBump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("escrowPaymentBump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("buyerPrice", Beet.fixedBeet(.init(value: .scalar(u64())))),
        ("tokenSize", Beet.fixedBeet(.init(value: .scalar(u64()))))
    ],
    description: "BuyInstructionArgs"
)
/**
* Accounts required by the _buy_ instruction
*
* @property [**signer**] wallet  
* @property [_writable_] paymentAccount  
* @property [] transferAuthority  
* @property [] treasuryMint  
* @property [] tokenAccount  
* @property [] metadata  
* @property [_writable_] escrowPaymentAccount  
* @property [] authority  
* @property [] auctionHouse  
* @property [_writable_] auctionHouseFeeAccount  
* @property [_writable_] buyerTradeState   
* @category Instructions
* @category Buy
* @category generated
*/
public struct BuyInstructionAccounts {
        let wallet: PublicKey
        let paymentAccount: PublicKey
        let transferAuthority: PublicKey
        let treasuryMint: PublicKey
        let tokenAccount: PublicKey
        let metadata: PublicKey
        let escrowPaymentAccount: PublicKey
        let authority: PublicKey
        let auctionHouse: PublicKey
        let auctionHouseFeeAccount: PublicKey
        let buyerTradeState: PublicKey
        let tokenProgram: PublicKey?
        let systemProgram: PublicKey?
        let rent: PublicKey?
}

public let buyInstructionDiscriminator = [103, 108, 111, 98, 97, 108, 58, 98] as [UInt8]

/**
* Creates a _Buy_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category Buy
* @category generated
*/
public func createBuyInstruction(accounts: BuyInstructionAccounts, 
args: BuyInstructionArgs, programId: PublicKey=PublicKey(string: "hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")!) -> TransactionInstruction {

    let data = buyStruct.serialize(
            instance: ["instructionDiscriminator": buyInstructionDiscriminator,
"tradeStateBump": args.tradeStateBump,
  "escrowPaymentBump": args.escrowPaymentBump,
  "buyerPrice": args.buyerPrice,
  "tokenSize": args.tokenSize])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.wallet,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.paymentAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.transferAuthority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.treasuryMint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenAccount,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.escrowPaymentAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.auctionHouse,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.auctionHouseFeeAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.buyerTradeState,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}