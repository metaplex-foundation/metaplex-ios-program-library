/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category PublicBuy
 * @category generated
 */
public struct PublicBuyInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let tradeStateBump: UInt8
    let escrowPaymentBump: UInt8
    let buyerPrice: UInt64
    let tokenSize: UInt64

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = publicBuyInstructionDiscriminator,
        tradeStateBump: UInt8,
        escrowPaymentBump: UInt8,
        buyerPrice: UInt64,
        tokenSize: UInt64
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.tradeStateBump = tradeStateBump
        self.escrowPaymentBump = escrowPaymentBump
        self.buyerPrice = buyerPrice
        self.tokenSize = tokenSize
    }
}
/**
 * @category Instructions
 * @category PublicBuy
 * @category generated
 */
public let publicBuyStruct = FixableBeetArgsStruct<PublicBuyInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("tradeStateBump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("escrowPaymentBump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("buyerPrice", Beet.fixedBeet(.init(value: .scalar(u64())))),
        ("tokenSize", Beet.fixedBeet(.init(value: .scalar(u64()))))
    ],
    description: "PublicBuyInstructionArgs"
)
/**
* Accounts required by the _publicBuy_ instruction
*
* @property [**signer**] wallet  
* @property [_writable_] paymentAccount  
* @property [] transferAuthority  
* @property [] treasuryMint  
* @property [] tokenAccount  
* @property [] metadata  
* @property [_writable_] escrowPaymentAccount  
* @property [] authority  
* @property [] auctionHouse  
* @property [_writable_] auctionHouseFeeAccount  
* @property [_writable_] buyerTradeState   
* @category Instructions
* @category PublicBuy
* @category generated
*/
public struct PublicBuyInstructionAccounts {
    let wallet: PublicKey
    let paymentAccount: PublicKey
    let transferAuthority: PublicKey
    let treasuryMint: PublicKey
    let tokenAccount: PublicKey
    let metadata: PublicKey
    let escrowPaymentAccount: PublicKey
    let authority: PublicKey
    let auctionHouse: PublicKey
    let auctionHouseFeeAccount: PublicKey
    let buyerTradeState: PublicKey
    let tokenProgram: PublicKey?
    let systemProgram: PublicKey?
    let rent: PublicKey?

    public init(
        wallet: PublicKey,
        paymentAccount: PublicKey,
        transferAuthority: PublicKey,
        treasuryMint: PublicKey,
        tokenAccount: PublicKey,
        metadata: PublicKey,
        escrowPaymentAccount: PublicKey,
        authority: PublicKey,
        auctionHouse: PublicKey,
        auctionHouseFeeAccount: PublicKey,
        buyerTradeState: PublicKey,
        tokenProgram: PublicKey? = nil,
        systemProgram: PublicKey? = nil,
        rent: PublicKey? = nil
    ) {
        self.wallet = wallet
        self.paymentAccount = paymentAccount
        self.transferAuthority = transferAuthority
        self.treasuryMint = treasuryMint
        self.tokenAccount = tokenAccount
        self.metadata = metadata
        self.escrowPaymentAccount = escrowPaymentAccount
        self.authority = authority
        self.auctionHouse = auctionHouse
        self.auctionHouseFeeAccount = auctionHouseFeeAccount
        self.buyerTradeState = buyerTradeState
        self.tokenProgram = tokenProgram
        self.systemProgram = systemProgram
        self.rent = rent
    }
}

public let publicBuyInstructionDiscriminator = [169, 84, 218, 35, 42, 206, 16, 171] as [UInt8]

/**
* Creates a _PublicBuy_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category PublicBuy
* @category generated
*/
public func createPublicBuyInstruction(accounts: PublicBuyInstructionAccounts, 
args: PublicBuyInstructionArgs, programId: PublicKey=PublicKey(string: "hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")!) -> TransactionInstruction {

    let data = publicBuyStruct.serialize(
            instance: ["instructionDiscriminator": publicBuyInstructionDiscriminator,
"tradeStateBump": args.tradeStateBump,
  "escrowPaymentBump": args.escrowPaymentBump,
  "buyerPrice": args.buyerPrice,
  "tokenSize": args.tokenSize])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.wallet,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.paymentAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.transferAuthority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.treasuryMint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenAccount,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.escrowPaymentAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.auctionHouse,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.auctionHouseFeeAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.buyerTradeState,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}