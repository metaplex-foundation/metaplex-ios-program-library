/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category Deposit
 * @category generated
 */
public struct DepositInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let escrowPaymentBump: UInt8
    let amount: UInt64

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = depositInstructionDiscriminator,
        escrowPaymentBump: UInt8,
        amount: UInt64
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.escrowPaymentBump = escrowPaymentBump
        self.amount = amount
    }
}
/**
 * @category Instructions
 * @category Deposit
 * @category generated
 */
public let depositStruct = FixableBeetArgsStruct<DepositInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("escrowPaymentBump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("amount", Beet.fixedBeet(.init(value: .scalar(u64()))))
    ],
    description: "DepositInstructionArgs"
)
/**
* Accounts required by the _deposit_ instruction
*
* @property [**signer**] wallet  
* @property [_writable_] paymentAccount  
* @property [] transferAuthority  
* @property [_writable_] escrowPaymentAccount  
* @property [] treasuryMint  
* @property [] authority  
* @property [] auctionHouse  
* @property [_writable_] auctionHouseFeeAccount   
* @category Instructions
* @category Deposit
* @category generated
*/
public struct DepositInstructionAccounts {
    let wallet: PublicKey
    let paymentAccount: PublicKey
    let transferAuthority: PublicKey
    let escrowPaymentAccount: PublicKey
    let treasuryMint: PublicKey
    let authority: PublicKey
    let auctionHouse: PublicKey
    let auctionHouseFeeAccount: PublicKey
    let tokenProgram: PublicKey?
    let systemProgram: PublicKey?
    let rent: PublicKey?

    public init(
        wallet: PublicKey,
        paymentAccount: PublicKey,
        transferAuthority: PublicKey,
        escrowPaymentAccount: PublicKey,
        treasuryMint: PublicKey,
        authority: PublicKey,
        auctionHouse: PublicKey,
        auctionHouseFeeAccount: PublicKey,
        tokenProgram: PublicKey? = nil,
        systemProgram: PublicKey? = nil,
        rent: PublicKey? = nil
    ) {
        self.wallet = wallet
        self.paymentAccount = paymentAccount
        self.transferAuthority = transferAuthority
        self.escrowPaymentAccount = escrowPaymentAccount
        self.treasuryMint = treasuryMint
        self.authority = authority
        self.auctionHouse = auctionHouse
        self.auctionHouseFeeAccount = auctionHouseFeeAccount
        self.tokenProgram = tokenProgram
        self.systemProgram = systemProgram
        self.rent = rent
    }
}

public let depositInstructionDiscriminator = [242, 35, 198, 137, 82, 225, 242, 182] as [UInt8]

/**
* Creates a _Deposit_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category Deposit
* @category generated
*/
public func createDepositInstruction(accounts: DepositInstructionAccounts, 
args: DepositInstructionArgs, programId: PublicKey=PublicKey(string: "hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")!) -> TransactionInstruction {

    let data = depositStruct.serialize(
            instance: ["instructionDiscriminator": depositInstructionDiscriminator,
"escrowPaymentBump": args.escrowPaymentBump,
  "amount": args.amount])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.wallet,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.paymentAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.transferAuthority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.escrowPaymentAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.treasuryMint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.auctionHouse,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.auctionHouseFeeAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}