/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category WithdrawFromFee
 * @category generated
 */
public struct WithdrawFromFeeInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let amount: UInt64

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = withdrawFromFeeInstructionDiscriminator,
        amount: UInt64
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.amount = amount
    }
}
/**
 * @category Instructions
 * @category WithdrawFromFee
 * @category generated
 */
public let withdrawFromFeeStruct = FixableBeetArgsStruct<WithdrawFromFeeInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("amount", Beet.fixedBeet(.init(value: .scalar(u64()))))
    ],
    description: "WithdrawFromFeeInstructionArgs"
)
/**
* Accounts required by the _withdrawFromFee_ instruction
*
* @property [**signer**] authority  
* @property [_writable_] feeWithdrawalDestination  
* @property [_writable_] auctionHouseFeeAccount  
* @property [_writable_] auctionHouse   
* @category Instructions
* @category WithdrawFromFee
* @category generated
*/
public struct WithdrawFromFeeInstructionAccounts {
    let authority: PublicKey
    let feeWithdrawalDestination: PublicKey
    let auctionHouseFeeAccount: PublicKey
    let auctionHouse: PublicKey
    let systemProgram: PublicKey?

    public init(
        authority: PublicKey,
        feeWithdrawalDestination: PublicKey,
        auctionHouseFeeAccount: PublicKey,
        auctionHouse: PublicKey,
        systemProgram: PublicKey? = nil
    ) {
        self.authority = authority
        self.feeWithdrawalDestination = feeWithdrawalDestination
        self.auctionHouseFeeAccount = auctionHouseFeeAccount
        self.auctionHouse = auctionHouse
        self.systemProgram = systemProgram
    }
}

public let withdrawFromFeeInstructionDiscriminator = [179, 208, 190, 154, 32, 179, 19, 59] as [UInt8]

/**
* Creates a _WithdrawFromFee_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category WithdrawFromFee
* @category generated
*/
public func createWithdrawFromFeeInstruction(accounts: WithdrawFromFeeInstructionAccounts, 
args: WithdrawFromFeeInstructionArgs, programId: PublicKey=PublicKey(string: "hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")!) -> TransactionInstruction {

    let data = withdrawFromFeeStruct.serialize(
            instance: ["instructionDiscriminator": withdrawFromFeeInstructionDiscriminator,
"amount": args.amount])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.feeWithdrawalDestination,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.auctionHouseFeeAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.auctionHouse,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}