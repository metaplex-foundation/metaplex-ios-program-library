/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation

public enum mpl_token_metadataError: String, Error {
    /**
 * InstructionUnpackError: '0x0'
 *
 * @category Errors
 * @category generated
 */
    case instructionUnpackErrorError = "0x0"
    /**
 * InstructionPackError: '0x1'
 *
 * @category Errors
 * @category generated
 */
    case instructionPackErrorError = "0x1"
    /**
 * NotRentExempt: '0x2'
 *
 * @category Errors
 * @category generated
 */
    case notRentExemptError = "0x2"
    /**
 * AlreadyInitialized: '0x3'
 *
 * @category Errors
 * @category generated
 */
    case alreadyInitializedError = "0x3"
    /**
 * Uninitialized: '0x4'
 *
 * @category Errors
 * @category generated
 */
    case uninitializedError = "0x4"
    /**
 * InvalidMetadataKey: '0x5'
 *
 * @category Errors
 * @category generated
 */
    case invalidMetadataKeyError = "0x5"
    /**
 * InvalidEditionKey: '0x6'
 *
 * @category Errors
 * @category generated
 */
    case invalidEditionKeyError = "0x6"
    /**
 * UpdateAuthorityIncorrect: '0x7'
 *
 * @category Errors
 * @category generated
 */
    case updateAuthorityIncorrectError = "0x7"
    /**
 * UpdateAuthorityIsNotSigner: '0x8'
 *
 * @category Errors
 * @category generated
 */
    case updateAuthorityIsNotSignerError = "0x8"
    /**
 * NotMintAuthority: '0x9'
 *
 * @category Errors
 * @category generated
 */
    case notMintAuthorityError = "0x9"
    /**
 * InvalidMintAuthority: '0xa'
 *
 * @category Errors
 * @category generated
 */
    case invalidMintAuthorityError = "0xa"
    /**
 * NameTooLong: '0xb'
 *
 * @category Errors
 * @category generated
 */
    case nameTooLongError = "0xb"
    /**
 * SymbolTooLong: '0xc'
 *
 * @category Errors
 * @category generated
 */
    case symbolTooLongError = "0xc"
    /**
 * UriTooLong: '0xd'
 *
 * @category Errors
 * @category generated
 */
    case uriTooLongError = "0xd"
    /**
 * UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner: '0xe'
 *
 * @category Errors
 * @category generated
 */
    case updateAuthorityMustBeEqualToMetadataAuthorityAndSignerError = "0xe"
    /**
 * MintMismatch: '0xf'
 *
 * @category Errors
 * @category generated
 */
    case mintMismatchError = "0xf"
    /**
 * EditionsMustHaveExactlyOneToken: '0x10'
 *
 * @category Errors
 * @category generated
 */
    case editionsMustHaveExactlyOneTokenError = "0x10"
    /**
 * MaxEditionsMintedAlready: '0x11'
 *
 * @category Errors
 * @category generated
 */
    case maxEditionsMintedAlreadyError = "0x11"
    /**
 * TokenMintToFailed: '0x12'
 *
 * @category Errors
 * @category generated
 */
    case tokenMintToFailedError = "0x12"
    /**
 * MasterRecordMismatch: '0x13'
 *
 * @category Errors
 * @category generated
 */
    case masterRecordMismatchError = "0x13"
    /**
 * DestinationMintMismatch: '0x14'
 *
 * @category Errors
 * @category generated
 */
    case destinationMintMismatchError = "0x14"
    /**
 * EditionAlreadyMinted: '0x15'
 *
 * @category Errors
 * @category generated
 */
    case editionAlreadyMintedError = "0x15"
    /**
 * PrintingMintDecimalsShouldBeZero: '0x16'
 *
 * @category Errors
 * @category generated
 */
    case printingMintDecimalsShouldBeZeroError = "0x16"
    /**
 * OneTimePrintingAuthorizationMintDecimalsShouldBeZero: '0x17'
 *
 * @category Errors
 * @category generated
 */
    case oneTimePrintingAuthorizationMintDecimalsShouldBeZeroError = "0x17"
    /**
 * EditionMintDecimalsShouldBeZero: '0x18'
 *
 * @category Errors
 * @category generated
 */
    case editionMintDecimalsShouldBeZeroError = "0x18"
    /**
 * TokenBurnFailed: '0x19'
 *
 * @category Errors
 * @category generated
 */
    case tokenBurnFailedError = "0x19"
    /**
 * TokenAccountOneTimeAuthMintMismatch: '0x1a'
 *
 * @category Errors
 * @category generated
 */
    case tokenAccountOneTimeAuthMintMismatchError = "0x1a"
    /**
 * DerivedKeyInvalid: '0x1b'
 *
 * @category Errors
 * @category generated
 */
    case derivedKeyInvalidError = "0x1b"
    /**
 * PrintingMintMismatch: '0x1c'
 *
 * @category Errors
 * @category generated
 */
    case printingMintMismatchError = "0x1c"
    /**
 * OneTimePrintingAuthMintMismatch: '0x1d'
 *
 * @category Errors
 * @category generated
 */
    case oneTimePrintingAuthMintMismatchError = "0x1d"
    /**
 * TokenAccountMintMismatch: '0x1e'
 *
 * @category Errors
 * @category generated
 */
    case tokenAccountMintMismatchError = "0x1e"
    /**
 * TokenAccountMintMismatchV2: '0x1f'
 *
 * @category Errors
 * @category generated
 */
    case tokenAccountMintMismatchV2Error = "0x1f"
    /**
 * NotEnoughTokens: '0x20'
 *
 * @category Errors
 * @category generated
 */
    case notEnoughTokensError = "0x20"
    /**
 * PrintingMintAuthorizationAccountMismatch: '0x21'
 *
 * @category Errors
 * @category generated
 */
    case printingMintAuthorizationAccountMismatchError = "0x21"
    /**
 * AuthorizationTokenAccountOwnerMismatch: '0x22'
 *
 * @category Errors
 * @category generated
 */
    case authorizationTokenAccountOwnerMismatchError = "0x22"
    /**
 * Disabled: '0x23'
 *
 * @category Errors
 * @category generated
 */
    case disabledError = "0x23"
    /**
 * CreatorsTooLong: '0x24'
 *
 * @category Errors
 * @category generated
 */
    case creatorsTooLongError = "0x24"
    /**
 * CreatorsMustBeAtleastOne: '0x25'
 *
 * @category Errors
 * @category generated
 */
    case creatorsMustBeAtleastOneError = "0x25"
    /**
 * MustBeOneOfCreators: '0x26'
 *
 * @category Errors
 * @category generated
 */
    case mustBeOneOfCreatorsError = "0x26"
    /**
 * NoCreatorsPresentOnMetadata: '0x27'
 *
 * @category Errors
 * @category generated
 */
    case noCreatorsPresentOnMetadataError = "0x27"
    /**
 * CreatorNotFound: '0x28'
 *
 * @category Errors
 * @category generated
 */
    case creatorNotFoundError = "0x28"
    /**
 * InvalidBasisPoints: '0x29'
 *
 * @category Errors
 * @category generated
 */
    case invalidBasisPointsError = "0x29"
    /**
 * PrimarySaleCanOnlyBeFlippedToTrue: '0x2a'
 *
 * @category Errors
 * @category generated
 */
    case primarySaleCanOnlyBeFlippedToTrueError = "0x2a"
    /**
 * OwnerMismatch: '0x2b'
 *
 * @category Errors
 * @category generated
 */
    case ownerMismatchError = "0x2b"
    /**
 * NoBalanceInAccountForAuthorization: '0x2c'
 *
 * @category Errors
 * @category generated
 */
    case noBalanceInAccountForAuthorizationError = "0x2c"
    /**
 * ShareTotalMustBe100: '0x2d'
 *
 * @category Errors
 * @category generated
 */
    case shareTotalMustBe100Error = "0x2d"
    /**
 * ReservationExists: '0x2e'
 *
 * @category Errors
 * @category generated
 */
    case reservationExistsError = "0x2e"
    /**
 * ReservationDoesNotExist: '0x2f'
 *
 * @category Errors
 * @category generated
 */
    case reservationDoesNotExistError = "0x2f"
    /**
 * ReservationNotSet: '0x30'
 *
 * @category Errors
 * @category generated
 */
    case reservationNotSetError = "0x30"
    /**
 * ReservationAlreadyMade: '0x31'
 *
 * @category Errors
 * @category generated
 */
    case reservationAlreadyMadeError = "0x31"
    /**
 * BeyondMaxAddressSize: '0x32'
 *
 * @category Errors
 * @category generated
 */
    case beyondMaxAddressSizeError = "0x32"
    /**
 * NumericalOverflowError: '0x33'
 *
 * @category Errors
 * @category generated
 */
    case numericalOverflowErrorError = "0x33"
    /**
 * ReservationBreachesMaximumSupply: '0x34'
 *
 * @category Errors
 * @category generated
 */
    case reservationBreachesMaximumSupplyError = "0x34"
    /**
 * AddressNotInReservation: '0x35'
 *
 * @category Errors
 * @category generated
 */
    case addressNotInReservationError = "0x35"
    /**
 * CannotVerifyAnotherCreator: '0x36'
 *
 * @category Errors
 * @category generated
 */
    case cannotVerifyAnotherCreatorError = "0x36"
    /**
 * CannotUnverifyAnotherCreator: '0x37'
 *
 * @category Errors
 * @category generated
 */
    case cannotUnverifyAnotherCreatorError = "0x37"
    /**
 * SpotMismatch: '0x38'
 *
 * @category Errors
 * @category generated
 */
    case spotMismatchError = "0x38"
    /**
 * IncorrectOwner: '0x39'
 *
 * @category Errors
 * @category generated
 */
    case incorrectOwnerError = "0x39"
    /**
 * PrintingWouldBreachMaximumSupply: '0x3a'
 *
 * @category Errors
 * @category generated
 */
    case printingWouldBreachMaximumSupplyError = "0x3a"
    /**
 * DataIsImmutable: '0x3b'
 *
 * @category Errors
 * @category generated
 */
    case dataIsImmutableError = "0x3b"
    /**
 * DuplicateCreatorAddress: '0x3c'
 *
 * @category Errors
 * @category generated
 */
    case duplicateCreatorAddressError = "0x3c"
    /**
 * ReservationSpotsRemainingShouldMatchTotalSpotsAtStart: '0x3d'
 *
 * @category Errors
 * @category generated
 */
    case reservationSpotsRemainingShouldMatchTotalSpotsAtStartError = "0x3d"
    /**
 * InvalidTokenProgram: '0x3e'
 *
 * @category Errors
 * @category generated
 */
    case invalidTokenProgramError = "0x3e"
    /**
 * DataTypeMismatch: '0x3f'
 *
 * @category Errors
 * @category generated
 */
    case dataTypeMismatchError = "0x3f"
    /**
 * BeyondAlottedAddressSize: '0x40'
 *
 * @category Errors
 * @category generated
 */
    case beyondAlottedAddressSizeError = "0x40"
    /**
 * ReservationNotComplete: '0x41'
 *
 * @category Errors
 * @category generated
 */
    case reservationNotCompleteError = "0x41"
    /**
 * TriedToReplaceAnExistingReservation: '0x42'
 *
 * @category Errors
 * @category generated
 */
    case triedToReplaceAnExistingReservationError = "0x42"
    /**
 * InvalidOperation: '0x43'
 *
 * @category Errors
 * @category generated
 */
    case invalidOperationError = "0x43"
    /**
 * InvalidOwner: '0x44'
 *
 * @category Errors
 * @category generated
 */
    case invalidOwnerError = "0x44"
    /**
 * PrintingMintSupplyMustBeZeroForConversion: '0x45'
 *
 * @category Errors
 * @category generated
 */
    case printingMintSupplyMustBeZeroForConversionError = "0x45"
    /**
 * OneTimeAuthMintSupplyMustBeZeroForConversion: '0x46'
 *
 * @category Errors
 * @category generated
 */
    case oneTimeAuthMintSupplyMustBeZeroForConversionError = "0x46"
    /**
 * InvalidEditionIndex: '0x47'
 *
 * @category Errors
 * @category generated
 */
    case invalidEditionIndexError = "0x47"
    /**
 * ReservationArrayShouldBeSizeOne: '0x48'
 *
 * @category Errors
 * @category generated
 */
    case reservationArrayShouldBeSizeOneError = "0x48"
    /**
 * IsMutableCanOnlyBeFlippedToFalse: '0x49'
 *
 * @category Errors
 * @category generated
 */
    case isMutableCanOnlyBeFlippedToFalseError = "0x49"
    /**
 * CollectionCannotBeVerifiedInThisInstruction: '0x4a'
 *
 * @category Errors
 * @category generated
 */
    case collectionCannotBeVerifiedInThisInstructionError = "0x4a"
    /**
 * Removed: '0x4b'
 *
 * @category Errors
 * @category generated
 */
    case removedError = "0x4b"
    /**
 * MustBeBurned: '0x4c'
 *
 * @category Errors
 * @category generated
 */
    case mustBeBurnedError = "0x4c"
    /**
 * InvalidUseMethod: '0x4d'
 *
 * @category Errors
 * @category generated
 */
    case invalidUseMethodError = "0x4d"
    /**
 * CannotChangeUseMethodAfterFirstUse: '0x4e'
 *
 * @category Errors
 * @category generated
 */
    case cannotChangeUseMethodAfterFirstUseError = "0x4e"
    /**
 * CannotChangeUsesAfterFirstUse: '0x4f'
 *
 * @category Errors
 * @category generated
 */
    case cannotChangeUsesAfterFirstUseError = "0x4f"
    /**
 * CollectionNotFound: '0x50'
 *
 * @category Errors
 * @category generated
 */
    case collectionNotFoundError = "0x50"
    /**
 * InvalidCollectionUpdateAuthority: '0x51'
 *
 * @category Errors
 * @category generated
 */
    case invalidCollectionUpdateAuthorityError = "0x51"
    /**
 * CollectionMustBeAUniqueMasterEdition: '0x52'
 *
 * @category Errors
 * @category generated
 */
    case collectionMustBeAUniqueMasterEditionError = "0x52"
    /**
 * UseAuthorityRecordAlreadyExists: '0x53'
 *
 * @category Errors
 * @category generated
 */
    case useAuthorityRecordAlreadyExistsError = "0x53"
    /**
 * UseAuthorityRecordAlreadyRevoked: '0x54'
 *
 * @category Errors
 * @category generated
 */
    case useAuthorityRecordAlreadyRevokedError = "0x54"
    /**
 * Unusable: '0x55'
 *
 * @category Errors
 * @category generated
 */
    case unusableError = "0x55"
    /**
 * NotEnoughUses: '0x56'
 *
 * @category Errors
 * @category generated
 */
    case notEnoughUsesError = "0x56"
    /**
 * CollectionAuthorityRecordAlreadyExists: '0x57'
 *
 * @category Errors
 * @category generated
 */
    case collectionAuthorityRecordAlreadyExistsError = "0x57"
    /**
 * CollectionAuthorityDoesNotExist: '0x58'
 *
 * @category Errors
 * @category generated
 */
    case collectionAuthorityDoesNotExistError = "0x58"
    /**
 * InvalidUseAuthorityRecord: '0x59'
 *
 * @category Errors
 * @category generated
 */
    case invalidUseAuthorityRecordError = "0x59"
    /**
 * InvalidCollectionAuthorityRecord: '0x5a'
 *
 * @category Errors
 * @category generated
 */
    case invalidCollectionAuthorityRecordError = "0x5a"
    /**
 * InvalidFreezeAuthority: '0x5b'
 *
 * @category Errors
 * @category generated
 */
    case invalidFreezeAuthorityError = "0x5b"
    /**
 * InvalidDelegate: '0x5c'
 *
 * @category Errors
 * @category generated
 */
    case invalidDelegateError = "0x5c"
    /**
 * CannotAdjustVerifiedCreator: '0x5d'
 *
 * @category Errors
 * @category generated
 */
    case cannotAdjustVerifiedCreatorError = "0x5d"
    /**
 * CannotRemoveVerifiedCreator: '0x5e'
 *
 * @category Errors
 * @category generated
 */
    case cannotRemoveVerifiedCreatorError = "0x5e"
    /**
 * CannotWipeVerifiedCreators: '0x5f'
 *
 * @category Errors
 * @category generated
 */
    case cannotWipeVerifiedCreatorsError = "0x5f"
    /**
 * NotAllowedToChangeSellerFeeBasisPoints: '0x60'
 *
 * @category Errors
 * @category generated
 */
    case notAllowedToChangeSellerFeeBasisPointsError = "0x60"
    /**
 * EditionOverrideCannotBeZero: '0x61'
 *
 * @category Errors
 * @category generated
 */
    case editionOverrideCannotBeZeroError = "0x61"
    /**
 * InvalidUser: '0x62'
 *
 * @category Errors
 * @category generated
 */
    case invalidUserError = "0x62"
    /**
 * RevokeCollectionAuthoritySignerIncorrect: '0x63'
 *
 * @category Errors
 * @category generated
 */
    case revokeCollectionAuthoritySignerIncorrectError = "0x63"
    /**
 * TokenCloseFailed: '0x64'
 *
 * @category Errors
 * @category generated
 */
    case tokenCloseFailedError = "0x64"
    /**
 * UnsizedCollection: '0x65'
 *
 * @category Errors
 * @category generated
 */
    case unsizedCollectionError = "0x65"
    /**
 * SizedCollection: '0x66'
 *
 * @category Errors
 * @category generated
 */
    case sizedCollectionError = "0x66"
    /**
 * MissingCollectionMetadata: '0x67'
 *
 * @category Errors
 * @category generated
 */
    case missingCollectionMetadataError = "0x67"
    /**
 * NotAMemberOfCollection: '0x68'
 *
 * @category Errors
 * @category generated
 */
    case notAMemberOfCollectionError = "0x68"
    /**
 * NotVerifiedMemberOfCollection: '0x69'
 *
 * @category Errors
 * @category generated
 */
    case notVerifiedMemberOfCollectionError = "0x69"
    /**
 * NotACollectionParent: '0x6a'
 *
 * @category Errors
 * @category generated
 */
    case notACollectionParentError = "0x6a"
    /**
 * CouldNotDetermineTokenStandard: '0x6b'
 *
 * @category Errors
 * @category generated
 */
    case couldNotDetermineTokenStandardError = "0x6b"
    /**
 * MissingEditionAccount: '0x6c'
 *
 * @category Errors
 * @category generated
 */
    case missingEditionAccountError = "0x6c"
    /**
 * NotAMasterEdition: '0x6d'
 *
 * @category Errors
 * @category generated
 */
    case notAMasterEditionError = "0x6d"
    /**
 * MasterEditionHasPrints: '0x6e'
 *
 * @category Errors
 * @category generated
 */
    case masterEditionHasPrintsError = "0x6e"
    /**
 * BorshDeserializationError: '0x6f'
 *
 * @category Errors
 * @category generated
 */
    case borshDeserializationErrorError = "0x6f"

    public var code: String? { self.rawValue }
}

extension mpl_token_metadataError: LocalizedError {
    public var errorDescription: String? {
        switch self {
            /**
 * InstructionUnpackError: 'Failed to unpack instruction data'
 *
 * @category Errors
 * @category generated
 */
    case .instructionUnpackErrorError: return "Failed to unpack instruction data"
    /**
 * InstructionPackError: 'Failed to pack instruction data'
 *
 * @category Errors
 * @category generated
 */
    case .instructionPackErrorError: return "Failed to pack instruction data"
    /**
 * NotRentExempt: 'Lamport balance below rent-exempt threshold'
 *
 * @category Errors
 * @category generated
 */
    case .notRentExemptError: return "Lamport balance below rent-exempt threshold"
    /**
 * AlreadyInitialized: 'Already initialized'
 *
 * @category Errors
 * @category generated
 */
    case .alreadyInitializedError: return "Already initialized"
    /**
 * Uninitialized: 'Uninitialized'
 *
 * @category Errors
 * @category generated
 */
    case .uninitializedError: return "Uninitialized"
    /**
 * InvalidMetadataKey: ' Metadata's key must match seed of ['metadata', program id, mint] provided'
 *
 * @category Errors
 * @category generated
 */
    case .invalidMetadataKeyError: return " Metadata's key must match seed of ['metadata', program id, mint] provided"
    /**
 * InvalidEditionKey: 'Edition's key must match seed of ['metadata', program id, name, 'edition'] provided'
 *
 * @category Errors
 * @category generated
 */
    case .invalidEditionKeyError: return "Edition's key must match seed of ['metadata', program id, name, 'edition'] provided"
    /**
 * UpdateAuthorityIncorrect: 'Update Authority given does not match'
 *
 * @category Errors
 * @category generated
 */
    case .updateAuthorityIncorrectError: return "Update Authority given does not match"
    /**
 * UpdateAuthorityIsNotSigner: 'Update Authority needs to be signer to update metadata'
 *
 * @category Errors
 * @category generated
 */
    case .updateAuthorityIsNotSignerError: return "Update Authority needs to be signer to update metadata"
    /**
 * NotMintAuthority: 'You must be the mint authority and signer on this transaction'
 *
 * @category Errors
 * @category generated
 */
    case .notMintAuthorityError: return "You must be the mint authority and signer on this transaction"
    /**
 * InvalidMintAuthority: 'Mint authority provided does not match the authority on the mint'
 *
 * @category Errors
 * @category generated
 */
    case .invalidMintAuthorityError: return "Mint authority provided does not match the authority on the mint"
    /**
 * NameTooLong: 'Name too long'
 *
 * @category Errors
 * @category generated
 */
    case .nameTooLongError: return "Name too long"
    /**
 * SymbolTooLong: 'Symbol too long'
 *
 * @category Errors
 * @category generated
 */
    case .symbolTooLongError: return "Symbol too long"
    /**
 * UriTooLong: 'URI too long'
 *
 * @category Errors
 * @category generated
 */
    case .uriTooLongError: return "URI too long"
    /**
 * UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner: 'Update authority must be equivalent to the metadata's authority and also signer of this transaction'
 *
 * @category Errors
 * @category generated
 */
    case .updateAuthorityMustBeEqualToMetadataAuthorityAndSignerError: return "Update authority must be equivalent to the metadata's authority and also signer of this transaction"
    /**
 * MintMismatch: 'Mint given does not match mint on Metadata'
 *
 * @category Errors
 * @category generated
 */
    case .mintMismatchError: return "Mint given does not match mint on Metadata"
    /**
 * EditionsMustHaveExactlyOneToken: 'Editions must have exactly one token'
 *
 * @category Errors
 * @category generated
 */
    case .editionsMustHaveExactlyOneTokenError: return "Editions must have exactly one token"
    /**
 * MaxEditionsMintedAlready: 'Maximum editions printed already'
 *
 * @category Errors
 * @category generated
 */
    case .maxEditionsMintedAlreadyError: return "Maximum editions printed already"
    /**
 * TokenMintToFailed: 'Token mint to failed'
 *
 * @category Errors
 * @category generated
 */
    case .tokenMintToFailedError: return "Token mint to failed"
    /**
 * MasterRecordMismatch: 'The master edition record passed must match the master record on the edition given'
 *
 * @category Errors
 * @category generated
 */
    case .masterRecordMismatchError: return "The master edition record passed must match the master record on the edition given"
    /**
 * DestinationMintMismatch: 'The destination account does not have the right mint'
 *
 * @category Errors
 * @category generated
 */
    case .destinationMintMismatchError: return "The destination account does not have the right mint"
    /**
 * EditionAlreadyMinted: 'An edition can only mint one of its kind!'
 *
 * @category Errors
 * @category generated
 */
    case .editionAlreadyMintedError: return "An edition can only mint one of its kind!"
    /**
 * PrintingMintDecimalsShouldBeZero: 'Printing mint decimals should be zero'
 *
 * @category Errors
 * @category generated
 */
    case .printingMintDecimalsShouldBeZeroError: return "Printing mint decimals should be zero"
    /**
 * OneTimePrintingAuthorizationMintDecimalsShouldBeZero: 'OneTimePrintingAuthorization mint decimals should be zero'
 *
 * @category Errors
 * @category generated
 */
    case .oneTimePrintingAuthorizationMintDecimalsShouldBeZeroError: return "OneTimePrintingAuthorization mint decimals should be zero"
    /**
 * EditionMintDecimalsShouldBeZero: 'EditionMintDecimalsShouldBeZero'
 *
 * @category Errors
 * @category generated
 */
    case .editionMintDecimalsShouldBeZeroError: return "EditionMintDecimalsShouldBeZero"
    /**
 * TokenBurnFailed: 'Token burn failed'
 *
 * @category Errors
 * @category generated
 */
    case .tokenBurnFailedError: return "Token burn failed"
    /**
 * TokenAccountOneTimeAuthMintMismatch: 'The One Time authorization mint does not match that on the token account!'
 *
 * @category Errors
 * @category generated
 */
    case .tokenAccountOneTimeAuthMintMismatchError: return "The One Time authorization mint does not match that on the token account!"
    /**
 * DerivedKeyInvalid: 'Derived key invalid'
 *
 * @category Errors
 * @category generated
 */
    case .derivedKeyInvalidError: return "Derived key invalid"
    /**
 * PrintingMintMismatch: 'The Printing mint does not match that on the master edition!'
 *
 * @category Errors
 * @category generated
 */
    case .printingMintMismatchError: return "The Printing mint does not match that on the master edition!"
    /**
 * OneTimePrintingAuthMintMismatch: 'The One Time Printing Auth mint does not match that on the master edition!'
 *
 * @category Errors
 * @category generated
 */
    case .oneTimePrintingAuthMintMismatchError: return "The One Time Printing Auth mint does not match that on the master edition!"
    /**
 * TokenAccountMintMismatch: 'The mint of the token account does not match the Printing mint!'
 *
 * @category Errors
 * @category generated
 */
    case .tokenAccountMintMismatchError: return "The mint of the token account does not match the Printing mint!"
    /**
 * TokenAccountMintMismatchV2: 'The mint of the token account does not match the master metadata mint!'
 *
 * @category Errors
 * @category generated
 */
    case .tokenAccountMintMismatchV2Error: return "The mint of the token account does not match the master metadata mint!"
    /**
 * NotEnoughTokens: 'Not enough tokens to mint a limited edition'
 *
 * @category Errors
 * @category generated
 */
    case .notEnoughTokensError: return "Not enough tokens to mint a limited edition"
    /**
 * PrintingMintAuthorizationAccountMismatch: 'The mint on your authorization token holding account does not match your Printing mint!'
 *
 * @category Errors
 * @category generated
 */
    case .printingMintAuthorizationAccountMismatchError: return "The mint on your authorization token holding account does not match your Printing mint!"
    /**
 * AuthorizationTokenAccountOwnerMismatch: 'The authorization token account has a different owner than the update authority for the master edition!'
 *
 * @category Errors
 * @category generated
 */
    case .authorizationTokenAccountOwnerMismatchError: return "The authorization token account has a different owner than the update authority for the master edition!"
    /**
 * Disabled: 'This feature is currently disabled.'
 *
 * @category Errors
 * @category generated
 */
    case .disabledError: return "This feature is currently disabled."
    /**
 * CreatorsTooLong: 'Creators list too long'
 *
 * @category Errors
 * @category generated
 */
    case .creatorsTooLongError: return "Creators list too long"
    /**
 * CreatorsMustBeAtleastOne: 'Creators must be at least one if set'
 *
 * @category Errors
 * @category generated
 */
    case .creatorsMustBeAtleastOneError: return "Creators must be at least one if set"
    /**
 * MustBeOneOfCreators: 'If using a creators array, you must be one of the creators listed'
 *
 * @category Errors
 * @category generated
 */
    case .mustBeOneOfCreatorsError: return "If using a creators array, you must be one of the creators listed"
    /**
 * NoCreatorsPresentOnMetadata: 'This metadata does not have creators'
 *
 * @category Errors
 * @category generated
 */
    case .noCreatorsPresentOnMetadataError: return "This metadata does not have creators"
    /**
 * CreatorNotFound: 'This creator address was not found'
 *
 * @category Errors
 * @category generated
 */
    case .creatorNotFoundError: return "This creator address was not found"
    /**
 * InvalidBasisPoints: 'Basis points cannot be more than 10000'
 *
 * @category Errors
 * @category generated
 */
    case .invalidBasisPointsError: return "Basis points cannot be more than 10000"
    /**
 * PrimarySaleCanOnlyBeFlippedToTrue: 'Primary sale can only be flipped to true and is immutable'
 *
 * @category Errors
 * @category generated
 */
    case .primarySaleCanOnlyBeFlippedToTrueError: return "Primary sale can only be flipped to true and is immutable"
    /**
 * OwnerMismatch: 'Owner does not match that on the account given'
 *
 * @category Errors
 * @category generated
 */
    case .ownerMismatchError: return "Owner does not match that on the account given"
    /**
 * NoBalanceInAccountForAuthorization: 'This account has no tokens to be used for authorization'
 *
 * @category Errors
 * @category generated
 */
    case .noBalanceInAccountForAuthorizationError: return "This account has no tokens to be used for authorization"
    /**
 * ShareTotalMustBe100: 'Share total must equal 100 for creator array'
 *
 * @category Errors
 * @category generated
 */
    case .shareTotalMustBe100Error: return "Share total must equal 100 for creator array"
    /**
 * ReservationExists: 'This reservation list already exists!'
 *
 * @category Errors
 * @category generated
 */
    case .reservationExistsError: return "This reservation list already exists!"
    /**
 * ReservationDoesNotExist: 'This reservation list does not exist!'
 *
 * @category Errors
 * @category generated
 */
    case .reservationDoesNotExistError: return "This reservation list does not exist!"
    /**
 * ReservationNotSet: 'This reservation list exists but was never set with reservations'
 *
 * @category Errors
 * @category generated
 */
    case .reservationNotSetError: return "This reservation list exists but was never set with reservations"
    /**
 * ReservationAlreadyMade: 'This reservation list has already been set!'
 *
 * @category Errors
 * @category generated
 */
    case .reservationAlreadyMadeError: return "This reservation list has already been set!"
    /**
 * BeyondMaxAddressSize: 'Provided more addresses than max allowed in single reservation'
 *
 * @category Errors
 * @category generated
 */
    case .beyondMaxAddressSizeError: return "Provided more addresses than max allowed in single reservation"
    /**
 * NumericalOverflowError: 'NumericalOverflowError'
 *
 * @category Errors
 * @category generated
 */
    case .numericalOverflowErrorError: return "NumericalOverflowError"
    /**
 * ReservationBreachesMaximumSupply: 'This reservation would go beyond the maximum supply of the master edition!'
 *
 * @category Errors
 * @category generated
 */
    case .reservationBreachesMaximumSupplyError: return "This reservation would go beyond the maximum supply of the master edition!"
    /**
 * AddressNotInReservation: 'Address not in reservation!'
 *
 * @category Errors
 * @category generated
 */
    case .addressNotInReservationError: return "Address not in reservation!"
    /**
 * CannotVerifyAnotherCreator: 'You cannot unilaterally verify another creator, they must sign'
 *
 * @category Errors
 * @category generated
 */
    case .cannotVerifyAnotherCreatorError: return "You cannot unilaterally verify another creator, they must sign"
    /**
 * CannotUnverifyAnotherCreator: 'You cannot unilaterally unverify another creator'
 *
 * @category Errors
 * @category generated
 */
    case .cannotUnverifyAnotherCreatorError: return "You cannot unilaterally unverify another creator"
    /**
 * SpotMismatch: 'In initial reservation setting, spots remaining should equal total spots'
 *
 * @category Errors
 * @category generated
 */
    case .spotMismatchError: return "In initial reservation setting, spots remaining should equal total spots"
    /**
 * IncorrectOwner: 'Incorrect account owner'
 *
 * @category Errors
 * @category generated
 */
    case .incorrectOwnerError: return "Incorrect account owner"
    /**
 * PrintingWouldBreachMaximumSupply: 'printing these tokens would breach the maximum supply limit of the master edition'
 *
 * @category Errors
 * @category generated
 */
    case .printingWouldBreachMaximumSupplyError: return "printing these tokens would breach the maximum supply limit of the master edition"
    /**
 * DataIsImmutable: 'Data is immutable'
 *
 * @category Errors
 * @category generated
 */
    case .dataIsImmutableError: return "Data is immutable"
    /**
 * DuplicateCreatorAddress: 'No duplicate creator addresses'
 *
 * @category Errors
 * @category generated
 */
    case .duplicateCreatorAddressError: return "No duplicate creator addresses"
    /**
 * ReservationSpotsRemainingShouldMatchTotalSpotsAtStart: 'Reservation spots remaining should match total spots when first being created'
 *
 * @category Errors
 * @category generated
 */
    case .reservationSpotsRemainingShouldMatchTotalSpotsAtStartError: return "Reservation spots remaining should match total spots when first being created"
    /**
 * InvalidTokenProgram: 'Invalid token program'
 *
 * @category Errors
 * @category generated
 */
    case .invalidTokenProgramError: return "Invalid token program"
    /**
 * DataTypeMismatch: 'Data type mismatch'
 *
 * @category Errors
 * @category generated
 */
    case .dataTypeMismatchError: return "Data type mismatch"
    /**
 * BeyondAlottedAddressSize: 'Beyond alotted address size in reservation!'
 *
 * @category Errors
 * @category generated
 */
    case .beyondAlottedAddressSizeError: return "Beyond alotted address size in reservation!"
    /**
 * ReservationNotComplete: 'The reservation has only been partially alotted'
 *
 * @category Errors
 * @category generated
 */
    case .reservationNotCompleteError: return "The reservation has only been partially alotted"
    /**
 * TriedToReplaceAnExistingReservation: 'You cannot splice over an existing reservation!'
 *
 * @category Errors
 * @category generated
 */
    case .triedToReplaceAnExistingReservationError: return "You cannot splice over an existing reservation!"
    /**
 * InvalidOperation: 'Invalid operation'
 *
 * @category Errors
 * @category generated
 */
    case .invalidOperationError: return "Invalid operation"
    /**
 * InvalidOwner: 'Invalid Owner'
 *
 * @category Errors
 * @category generated
 */
    case .invalidOwnerError: return "Invalid Owner"
    /**
 * PrintingMintSupplyMustBeZeroForConversion: 'Printing mint supply must be zero for conversion'
 *
 * @category Errors
 * @category generated
 */
    case .printingMintSupplyMustBeZeroForConversionError: return "Printing mint supply must be zero for conversion"
    /**
 * OneTimeAuthMintSupplyMustBeZeroForConversion: 'One Time Auth mint supply must be zero for conversion'
 *
 * @category Errors
 * @category generated
 */
    case .oneTimeAuthMintSupplyMustBeZeroForConversionError: return "One Time Auth mint supply must be zero for conversion"
    /**
 * InvalidEditionIndex: 'You tried to insert one edition too many into an edition mark pda'
 *
 * @category Errors
 * @category generated
 */
    case .invalidEditionIndexError: return "You tried to insert one edition too many into an edition mark pda"
    /**
 * ReservationArrayShouldBeSizeOne: 'In the legacy system the reservation needs to be of size one for cpu limit reasons'
 *
 * @category Errors
 * @category generated
 */
    case .reservationArrayShouldBeSizeOneError: return "In the legacy system the reservation needs to be of size one for cpu limit reasons"
    /**
 * IsMutableCanOnlyBeFlippedToFalse: 'Is Mutable can only be flipped to false'
 *
 * @category Errors
 * @category generated
 */
    case .isMutableCanOnlyBeFlippedToFalseError: return "Is Mutable can only be flipped to false"
    /**
 * CollectionCannotBeVerifiedInThisInstruction: 'Cannont Verify Collection in this Instruction'
 *
 * @category Errors
 * @category generated
 */
    case .collectionCannotBeVerifiedInThisInstructionError: return "Cannont Verify Collection in this Instruction"
    /**
 * Removed: 'This instruction was deprecated in a previous release and is now removed'
 *
 * @category Errors
 * @category generated
 */
    case .removedError: return "This instruction was deprecated in a previous release and is now removed"
    /**
 * MustBeBurned: 'This token use method is burn and there are no remaining uses, it must be burned'
 *
 * @category Errors
 * @category generated
 */
    case .mustBeBurnedError: return "This token use method is burn and there are no remaining uses, it must be burned"
    /**
 * InvalidUseMethod: 'This use method is invalid'
 *
 * @category Errors
 * @category generated
 */
    case .invalidUseMethodError: return "This use method is invalid"
    /**
 * CannotChangeUseMethodAfterFirstUse: 'Cannot Change Use Method after the first use'
 *
 * @category Errors
 * @category generated
 */
    case .cannotChangeUseMethodAfterFirstUseError: return "Cannot Change Use Method after the first use"
    /**
 * CannotChangeUsesAfterFirstUse: 'Cannot Change Remaining or Available uses after the first use'
 *
 * @category Errors
 * @category generated
 */
    case .cannotChangeUsesAfterFirstUseError: return "Cannot Change Remaining or Available uses after the first use"
    /**
 * CollectionNotFound: 'Collection Not Found on Metadata'
 *
 * @category Errors
 * @category generated
 */
    case .collectionNotFoundError: return "Collection Not Found on Metadata"
    /**
 * InvalidCollectionUpdateAuthority: 'Collection Update Authority is invalid'
 *
 * @category Errors
 * @category generated
 */
    case .invalidCollectionUpdateAuthorityError: return "Collection Update Authority is invalid"
    /**
 * CollectionMustBeAUniqueMasterEdition: 'Collection Must Be a Unique Master Edition v2'
 *
 * @category Errors
 * @category generated
 */
    case .collectionMustBeAUniqueMasterEditionError: return "Collection Must Be a Unique Master Edition v2"
    /**
 * UseAuthorityRecordAlreadyExists: 'The Use Authority Record Already Exists, to modify it Revoke, then Approve'
 *
 * @category Errors
 * @category generated
 */
    case .useAuthorityRecordAlreadyExistsError: return "The Use Authority Record Already Exists, to modify it Revoke, then Approve"
    /**
 * UseAuthorityRecordAlreadyRevoked: 'The Use Authority Record is empty or already revoked'
 *
 * @category Errors
 * @category generated
 */
    case .useAuthorityRecordAlreadyRevokedError: return "The Use Authority Record is empty or already revoked"
    /**
 * Unusable: 'This token has no uses'
 *
 * @category Errors
 * @category generated
 */
    case .unusableError: return "This token has no uses"
    /**
 * NotEnoughUses: 'There are not enough Uses left on this token.'
 *
 * @category Errors
 * @category generated
 */
    case .notEnoughUsesError: return "There are not enough Uses left on this token."
    /**
 * CollectionAuthorityRecordAlreadyExists: 'This Collection Authority Record Already Exists.'
 *
 * @category Errors
 * @category generated
 */
    case .collectionAuthorityRecordAlreadyExistsError: return "This Collection Authority Record Already Exists."
    /**
 * CollectionAuthorityDoesNotExist: 'This Collection Authority Record Does Not Exist.'
 *
 * @category Errors
 * @category generated
 */
    case .collectionAuthorityDoesNotExistError: return "This Collection Authority Record Does Not Exist."
    /**
 * InvalidUseAuthorityRecord: 'This Use Authority Record is invalid.'
 *
 * @category Errors
 * @category generated
 */
    case .invalidUseAuthorityRecordError: return "This Use Authority Record is invalid."
    /**
 * InvalidCollectionAuthorityRecord: 'This Collection Authority Record is invalid.'
 *
 * @category Errors
 * @category generated
 */
    case .invalidCollectionAuthorityRecordError: return "This Collection Authority Record is invalid."
    /**
 * InvalidFreezeAuthority: 'Metadata does not match the freeze authority on the mint'
 *
 * @category Errors
 * @category generated
 */
    case .invalidFreezeAuthorityError: return "Metadata does not match the freeze authority on the mint"
    /**
 * InvalidDelegate: 'All tokens in this account have not been delegated to this user.'
 *
 * @category Errors
 * @category generated
 */
    case .invalidDelegateError: return "All tokens in this account have not been delegated to this user."
    /**
 * CannotAdjustVerifiedCreator: 'Creator can not be adjusted once they are verified.'
 *
 * @category Errors
 * @category generated
 */
    case .cannotAdjustVerifiedCreatorError: return "Creator can not be adjusted once they are verified."
    /**
 * CannotRemoveVerifiedCreator: 'Verified creators cannot be removed.'
 *
 * @category Errors
 * @category generated
 */
    case .cannotRemoveVerifiedCreatorError: return "Verified creators cannot be removed."
    /**
 * CannotWipeVerifiedCreators: 'Can not wipe verified creators.'
 *
 * @category Errors
 * @category generated
 */
    case .cannotWipeVerifiedCreatorsError: return "Can not wipe verified creators."
    /**
 * NotAllowedToChangeSellerFeeBasisPoints: 'Not allowed to change seller fee basis points.'
 *
 * @category Errors
 * @category generated
 */
    case .notAllowedToChangeSellerFeeBasisPointsError: return "Not allowed to change seller fee basis points."
    /**
 * EditionOverrideCannotBeZero: 'Edition override cannot be zero'
 *
 * @category Errors
 * @category generated
 */
    case .editionOverrideCannotBeZeroError: return "Edition override cannot be zero"
    /**
 * InvalidUser: 'Invalid User'
 *
 * @category Errors
 * @category generated
 */
    case .invalidUserError: return "Invalid User"
    /**
 * RevokeCollectionAuthoritySignerIncorrect: 'Revoke Collection Authority signer is incorrect'
 *
 * @category Errors
 * @category generated
 */
    case .revokeCollectionAuthoritySignerIncorrectError: return "Revoke Collection Authority signer is incorrect"
    /**
 * TokenCloseFailed: 'Token close failed'
 *
 * @category Errors
 * @category generated
 */
    case .tokenCloseFailedError: return "Token close failed"
    /**
 * UnsizedCollection: 'Can't use this function on unsized collection'
 *
 * @category Errors
 * @category generated
 */
    case .unsizedCollectionError: return "Can't use this function on unsized collection"
    /**
 * SizedCollection: 'Can't use this function on a sized collection'
 *
 * @category Errors
 * @category generated
 */
    case .sizedCollectionError: return "Can't use this function on a sized collection"
    /**
 * MissingCollectionMetadata: 'Can't burn a verified member of a collection w/o providing collection metadata account'
 *
 * @category Errors
 * @category generated
 */
    case .missingCollectionMetadataError: return "Can't burn a verified member of a collection w/o providing collection metadata account"
    /**
 * NotAMemberOfCollection: 'This NFT is not a member of the specified collection.'
 *
 * @category Errors
 * @category generated
 */
    case .notAMemberOfCollectionError: return "This NFT is not a member of the specified collection."
    /**
 * NotVerifiedMemberOfCollection: 'This NFT is not a verified member of the specified collection.'
 *
 * @category Errors
 * @category generated
 */
    case .notVerifiedMemberOfCollectionError: return "This NFT is not a verified member of the specified collection."
    /**
 * NotACollectionParent: 'This NFT is not a collection parent NFT.'
 *
 * @category Errors
 * @category generated
 */
    case .notACollectionParentError: return "This NFT is not a collection parent NFT."
    /**
 * CouldNotDetermineTokenStandard: 'Could not determine a TokenStandard type.'
 *
 * @category Errors
 * @category generated
 */
    case .couldNotDetermineTokenStandardError: return "Could not determine a TokenStandard type."
    /**
 * MissingEditionAccount: 'This mint account has an edition but none was provided.'
 *
 * @category Errors
 * @category generated
 */
    case .missingEditionAccountError: return "This mint account has an edition but none was provided."
    /**
 * NotAMasterEdition: 'This edition is not a Master Edition'
 *
 * @category Errors
 * @category generated
 */
    case .notAMasterEditionError: return "This edition is not a Master Edition"
    /**
 * MasterEditionHasPrints: 'This Master Edition has existing prints'
 *
 * @category Errors
 * @category generated
 */
    case .masterEditionHasPrintsError: return "This Master Edition has existing prints"
    /**
 * BorshDeserializationError: 'Borsh Deserialization Error'
 *
 * @category Errors
 * @category generated
 */
    case .borshDeserializationErrorError: return "Borsh Deserialization Error"
        }
    }
}