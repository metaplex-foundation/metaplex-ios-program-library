/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import BeetSolana
import Solana
import Beet


/**
* Arguments used to create {@link Reservationlistv2}
* @category Accounts
* @category generated
*/
public protocol Reservationlistv2Args {
    var reservationListV2Discriminator: [UInt8] { get }
     var key: Key { get }
     var masterEdition: PublicKey { get }
     var supplySnapshot: COption<UInt64> { get }
     var reservations: [Reservation] { get }
     var totalReservationSpots: UInt64 { get }
     var currentReservationSpots: UInt64 { get }
}

/**
 * Holds the data for the {@link Reservationlistv2} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
public struct Reservationlistv2: Reservationlistv2Args {
  public static let reservationListV2Discriminator = [193, 233, 97, 55, 245, 135, 103, 218] as [UInt8]

  public let reservationListV2Discriminator: [UInt8]
  public let key: Key
  public let masterEdition: PublicKey
  public let supplySnapshot: COption<UInt64>
  public let reservations: [Reservation]
  public let totalReservationSpots: UInt64
  public let currentReservationSpots: UInt64

  /**
   * Creates a {@link Reservationlistv2} instance from the provided args.
   */
  public static func fromArgs(args: Args) -> Reservationlistv2 {
    return Reservationlistv2(
        reservationListV2Discriminator: args["accountDiscriminator"] as! [UInt8],
        key: args["key"] as! Key,
        masterEdition: args["masterEdition"] as! PublicKey,
        supplySnapshot: args["supplySnapshot"] as! COption<UInt64>,
        reservations: args["reservations"] as! [Reservation],
        totalReservationSpots: args["totalReservationSpots"] as! UInt64,
        currentReservationSpots: args["currentReservationSpots"] as! UInt64
    )
  }
  /**
   * Deserializes the {@link Reservationlistv2} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func fromAccountInfo(
    accountInfo: Foundation.Data,
    offset:Int=0
  ) -> ( Reservationlistv2, Int )  {
    return Reservationlistv2.deserialize(buf: accountInfo, offset: offset)
  }
  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Reservationlistv2} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  public static func fromAccountAddress(
    connection: Api,
    address: PublicKey,
    onComplete: @escaping (Result<Reservationlistv2, Error>) -> Void
  ) {
    connection.getAccountInfo(account: address.base58EncodedString) { result in
        switch result {
            case .success(let pureData):
                if let data = pureData.data?.value {
                    onComplete(.success(Reservationlistv2.deserialize(buf: data).0))
                } else {
                    onComplete(.failure(SolanaError.nullValue))
                }
            case .failure(let error):
                onComplete(.failure(error))
        }
    }
  }
  /**
   * Deserializes the {@link Reservationlistv2} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func deserialize(
    buf: Foundation.Data,
    offset: Int = 0
  ) -> ( Reservationlistv2, Int ) {
    return reservationListV2Beet.deserialize(buffer: buf, offset: offset)
  }
  /**
   * Serializes the {@link Reservationlistv2} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  public func serialize() -> ( Foundation.Data, Int ) {
    return reservationListV2Beet.serialize(instance: [
        "reservationListV2Discriminator" : self.reservationListV2Discriminator,
        "key" : self.key,
        "masterEdition" : self.masterEdition,
        "supplySnapshot" : self.supplySnapshot,
        "reservations" : self.reservations,
        "totalReservationSpots" : self.totalReservationSpots,
        "currentReservationSpots" : self.currentReservationSpots
        ])
  }
  /**
* Returns the byteSize of a {@link Buffer} holding the serialized data of
* {@link Reservationlistv2} for the provided args.
*
* @param args need to be provided since the byte size for this account
* depends on them
*/
static func byteSize(args: Reservationlistv2Args) -> UInt64 {
    return UInt64(reservationListV2Beet.toFixedFromValue(val: args).byteSize)
}
/**
* Fetches the minimum balance needed to exempt an account holding
* {@link Reservationlistv2} data from rent
*
* @param args need to be provided since the byte size for this account
* depends on them
* @param connection used to retrieve the rent exemption information
*/
static func getMinimumBalanceForRentExemption(
    args: Reservationlistv2Args,
    connection: Api,
    commitment: Commitment?,
    onComplete: @escaping(Result<UInt64, Error>) -> Void
) {
    return connection.getMinimumBalanceForRentExemption(dataLength: Reservationlistv2.byteSize(args: args), commitment: commitment, onComplete: onComplete)
}
}
  /**
   * @category Accounts
   * @category generated
   */
  public let reservationListV2Beet = FixableBeetStruct<Reservationlistv2>(
    fields:[
        ("accountDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("key", keyBeetWrapped),
        ("masterEdition", Beet.fixedBeet(.init(value: .scalar(BeetPublicKey())))),
        ("supplySnapshot", Beet.fixableBeat(coption(inner: Beet.fixedBeet(.init(value: .scalar(u64())))))),
        ("reservations", Beet.fixableBeat(array(element: reservationBeetWrapped))),
        ("totalReservationSpots", Beet.fixedBeet(.init(value: .scalar(u64())))),
        ("currentReservationSpots", Beet.fixedBeet(.init(value: .scalar(u64()))))
    ],
    construct: Reservationlistv2.fromArgs,
    description: "Reservationlistv2"
)
