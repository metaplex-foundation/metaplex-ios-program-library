/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category DeprecatedMintPrintingTokensViaToken
 * @category generated
 */
public struct DeprecatedMintPrintingTokensViaTokenInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let mintPrintingTokensViaTokenArgs: MintPrintingTokensViaTokenArgs

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = deprecatedMintPrintingTokensViaTokenInstructionDiscriminator,
        mintPrintingTokensViaTokenArgs: MintPrintingTokensViaTokenArgs
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.mintPrintingTokensViaTokenArgs = mintPrintingTokensViaTokenArgs
    }
}
/**
 * @category Instructions
 * @category DeprecatedMintPrintingTokensViaToken
 * @category generated
 */
public let DeprecatedMintPrintingTokensViaTokenStruct = FixableBeetArgsStruct<DeprecatedMintPrintingTokensViaTokenInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("mintPrintingTokensViaTokenArgs", mintPrintingTokensViaTokenArgsBeetWrapped)
    ],
    description: "DeprecatedMintPrintingTokensViaTokenInstructionArgs"
)
/**
* Accounts required by the _DeprecatedMintPrintingTokensViaToken_ instruction
*
* @property [_writable_] destination  
* @property [_writable_] token  
* @property [_writable_] oneTimePrintingAuthorizationMint  
* @property [_writable_] printingMint  
* @property [**signer**] burnAuthority  
* @property [] metadata  
* @property [] masterEdition   
* @category Instructions
* @category DeprecatedMintPrintingTokensViaToken
* @category generated
*/
public struct DeprecatedMintPrintingTokensViaTokenInstructionAccounts {
    let destination: PublicKey
    let token: PublicKey
    let oneTimePrintingAuthorizationMint: PublicKey
    let printingMint: PublicKey
    let burnAuthority: PublicKey
    let metadata: PublicKey
    let masterEdition: PublicKey
    let tokenProgram: PublicKey?
    let rent: PublicKey?

    public init(
        destination: PublicKey,
        token: PublicKey,
        oneTimePrintingAuthorizationMint: PublicKey,
        printingMint: PublicKey,
        burnAuthority: PublicKey,
        metadata: PublicKey,
        masterEdition: PublicKey,
        tokenProgram: PublicKey? = nil,
        rent: PublicKey? = nil
    ) {
        self.destination = destination
        self.token = token
        self.oneTimePrintingAuthorizationMint = oneTimePrintingAuthorizationMint
        self.printingMint = printingMint
        self.burnAuthority = burnAuthority
        self.metadata = metadata
        self.masterEdition = masterEdition
        self.tokenProgram = tokenProgram
        self.rent = rent
    }
}

public let deprecatedMintPrintingTokensViaTokenInstructionDiscriminator = [84, 34, 152, 133, 145, 48, 4, 223] as [UInt8]

/**
* Creates a _DeprecatedMintPrintingTokensViaToken_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category DeprecatedMintPrintingTokensViaToken
* @category generated
*/
public func createDeprecatedMintPrintingTokensViaTokenInstruction(accounts: DeprecatedMintPrintingTokensViaTokenInstructionAccounts, 
args: DeprecatedMintPrintingTokensViaTokenInstructionArgs, programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = DeprecatedMintPrintingTokensViaTokenStruct.serialize(
            instance: ["instructionDiscriminator": deprecatedMintPrintingTokensViaTokenInstructionDiscriminator,
"mintPrintingTokensViaTokenArgs": args.mintPrintingTokensViaTokenArgs])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.destination,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.token,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.oneTimePrintingAuthorizationMint,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.printingMint,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.burnAuthority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.masterEdition,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}