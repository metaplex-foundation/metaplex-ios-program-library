/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category ApproveUseAuthority
 * @category generated
 */
public struct ApproveUseAuthorityInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let approveUseAuthorityArgs: ApproveUseAuthorityArgs

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = approveUseAuthorityInstructionDiscriminator,
        approveUseAuthorityArgs: ApproveUseAuthorityArgs
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.approveUseAuthorityArgs = approveUseAuthorityArgs
    }
}
/**
 * @category Instructions
 * @category ApproveUseAuthority
 * @category generated
 */
public let ApproveUseAuthorityStruct = FixableBeetArgsStruct<ApproveUseAuthorityInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("approveUseAuthorityArgs", approveUseAuthorityArgsBeetWrapped)
    ],
    description: "ApproveUseAuthorityInstructionArgs"
)
/**
* Accounts required by the _ApproveUseAuthority_ instruction
*
* @property [_writable_] useAuthorityRecord  
* @property [_writable_, **signer**] owner  
* @property [_writable_, **signer**] payer  
* @property [] user  
* @property [_writable_] ownerTokenAccount  
* @property [] metadata  
* @property [] mint  
* @property [] burner   
* @category Instructions
* @category ApproveUseAuthority
* @category generated
*/
public struct ApproveUseAuthorityInstructionAccounts {
    let useAuthorityRecord: PublicKey
    let owner: PublicKey
    let payer: PublicKey
    let user: PublicKey
    let ownerTokenAccount: PublicKey
    let metadata: PublicKey
    let mint: PublicKey
    let burner: PublicKey
    let tokenProgram: PublicKey?
    let systemProgram: PublicKey?
    let rent: PublicKey?

    public init(
        useAuthorityRecord: PublicKey,
        owner: PublicKey,
        payer: PublicKey,
        user: PublicKey,
        ownerTokenAccount: PublicKey,
        metadata: PublicKey,
        mint: PublicKey,
        burner: PublicKey,
        tokenProgram: PublicKey? = nil,
        systemProgram: PublicKey? = nil,
        rent: PublicKey? = nil
    ) {
        self.useAuthorityRecord = useAuthorityRecord
        self.owner = owner
        self.payer = payer
        self.user = user
        self.ownerTokenAccount = ownerTokenAccount
        self.metadata = metadata
        self.mint = mint
        self.burner = burner
        self.tokenProgram = tokenProgram
        self.systemProgram = systemProgram
        self.rent = rent
    }
}

public let approveUseAuthorityInstructionDiscriminator = [14, 4, 77, 134, 86, 23, 37, 236] as [UInt8]

/**
* Creates a _ApproveUseAuthority_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category ApproveUseAuthority
* @category generated
*/
public func createApproveUseAuthorityInstruction(accounts: ApproveUseAuthorityInstructionAccounts, 
args: ApproveUseAuthorityInstructionArgs, programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = ApproveUseAuthorityStruct.serialize(
            instance: ["instructionDiscriminator": approveUseAuthorityInstructionDiscriminator,
"approveUseAuthorityArgs": args.approveUseAuthorityArgs])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.useAuthorityRecord,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.owner,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.user,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.ownerTokenAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.burner,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}