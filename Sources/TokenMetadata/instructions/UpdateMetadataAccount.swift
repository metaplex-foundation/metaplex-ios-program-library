/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category UpdateMetadataAccount
 * @category generated
 */
public struct UpdateMetadataAccountInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let updateMetadataAccountArgs: UpdateMetadataAccountArgs

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = updateMetadataAccountInstructionDiscriminator,
        updateMetadataAccountArgs: UpdateMetadataAccountArgs
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.updateMetadataAccountArgs = updateMetadataAccountArgs
    }
}
/**
 * @category Instructions
 * @category UpdateMetadataAccount
 * @category generated
 */
public let UpdateMetadataAccountStruct = FixableBeetArgsStruct<UpdateMetadataAccountInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("updateMetadataAccountArgs", updateMetadataAccountArgsBeetWrapped)
    ],
    description: "UpdateMetadataAccountInstructionArgs"
)
/**
* Accounts required by the _UpdateMetadataAccount_ instruction
*
* @property [_writable_] metadata  
* @property [**signer**] updateAuthority   
* @category Instructions
* @category UpdateMetadataAccount
* @category generated
*/
public struct UpdateMetadataAccountInstructionAccounts {
    let metadata: PublicKey
    let updateAuthority: PublicKey

    public init(
        metadata: PublicKey,
        updateAuthority: PublicKey
    ) {
        self.metadata = metadata
        self.updateAuthority = updateAuthority
    }
}

public let updateMetadataAccountInstructionDiscriminator = [141, 14, 23, 104, 247, 192, 53, 173] as [UInt8]

/**
* Creates a _UpdateMetadataAccount_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category UpdateMetadataAccount
* @category generated
*/
public func createUpdateMetadataAccountInstruction(accounts: UpdateMetadataAccountInstructionAccounts, 
args: UpdateMetadataAccountInstructionArgs, programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = UpdateMetadataAccountStruct.serialize(
            instance: ["instructionDiscriminator": updateMetadataAccountInstructionDiscriminator,
"updateMetadataAccountArgs": args.updateMetadataAccountArgs])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.updateAuthority,
            isSigner: true,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}