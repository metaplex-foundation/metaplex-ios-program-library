/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category ConvertMasterEditionV1ToV2
 * @category generated
 */
public struct ConvertMasterEditionV1ToV2InstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = convertMasterEditionV1ToV2InstructionDiscriminator
    ) {
        self.instructionDiscriminator = instructionDiscriminator
    }
}
/**
 * @category Instructions
 * @category ConvertMasterEditionV1ToV2
 * @category generated
 */
public let ConvertMasterEditionV1ToV2Struct = FixableBeetArgsStruct<ConvertMasterEditionV1ToV2InstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "ConvertMasterEditionV1ToV2InstructionArgs"
)
/**
* Accounts required by the _ConvertMasterEditionV1ToV2_ instruction
*
* @property [_writable_] masterEdition  
* @property [_writable_] oneTimeAuth  
* @property [_writable_] printingMint   
* @category Instructions
* @category ConvertMasterEditionV1ToV2
* @category generated
*/
public struct ConvertMasterEditionV1ToV2InstructionAccounts {
    let masterEdition: PublicKey
    let oneTimeAuth: PublicKey
    let printingMint: PublicKey

    public init(
        masterEdition: PublicKey,
        oneTimeAuth: PublicKey,
        printingMint: PublicKey
    ) {
        self.masterEdition = masterEdition
        self.oneTimeAuth = oneTimeAuth
        self.printingMint = printingMint
    }
}

public let convertMasterEditionV1ToV2InstructionDiscriminator = [217, 26, 108, 0, 55, 126, 167, 238] as [UInt8]

/**
* Creates a _ConvertMasterEditionV1ToV2_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category ConvertMasterEditionV1ToV2
* @category generated
*/
public func createConvertMasterEditionV1ToV2Instruction(accounts: ConvertMasterEditionV1ToV2InstructionAccounts, 
programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = ConvertMasterEditionV1ToV2Struct.serialize(
            instance: ["instructionDiscriminator": convertMasterEditionV1ToV2InstructionDiscriminator ])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.masterEdition,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.oneTimeAuth,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.printingMint,
            isSigner: false,
            isWritable: true
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}