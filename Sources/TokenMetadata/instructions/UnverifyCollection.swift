/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category UnverifyCollection
 * @category generated
 */
public struct UnverifyCollectionInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = unverifyCollectionInstructionDiscriminator
    ) {
        self.instructionDiscriminator = instructionDiscriminator
    }
}
/**
 * @category Instructions
 * @category UnverifyCollection
 * @category generated
 */
public let UnverifyCollectionStruct = FixableBeetArgsStruct<UnverifyCollectionInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "UnverifyCollectionInstructionArgs"
)
/**
* Accounts required by the _UnverifyCollection_ instruction
*
* @property [_writable_] metadata  
* @property [_writable_, **signer**] collectionAuthority  
* @property [] collectionMint  
* @property [] collection  
* @property [] collectionMasterEditionAccount  
* @property [] collectionAuthorityRecord (optional)   
* @category Instructions
* @category UnverifyCollection
* @category generated
*/
public struct UnverifyCollectionInstructionAccounts {
    let metadata: PublicKey
    let collectionAuthority: PublicKey
    let collectionMint: PublicKey
    let collection: PublicKey
    let collectionMasterEditionAccount: PublicKey
    let collectionAuthorityRecord: PublicKey?

    public init(
        metadata: PublicKey,
        collectionAuthority: PublicKey,
        collectionMint: PublicKey,
        collection: PublicKey,
        collectionMasterEditionAccount: PublicKey,
        collectionAuthorityRecord: PublicKey? = nil
    ) {
        self.metadata = metadata
        self.collectionAuthority = collectionAuthority
        self.collectionMint = collectionMint
        self.collection = collection
        self.collectionMasterEditionAccount = collectionMasterEditionAccount
        self.collectionAuthorityRecord = collectionAuthorityRecord
    }
}

public let unverifyCollectionInstructionDiscriminator = [250, 251, 42, 106, 41, 137, 186, 168] as [UInt8]

/**
* Creates a _UnverifyCollection_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category UnverifyCollection
* @category generated
*/
public func createUnverifyCollectionInstruction(accounts: UnverifyCollectionInstructionAccounts, 
programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = UnverifyCollectionStruct.serialize(
            instance: ["instructionDiscriminator": unverifyCollectionInstructionDiscriminator ])

    var keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.collectionAuthority,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.collectionMint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collection,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionMasterEditionAccount,
            isSigner: false,
            isWritable: false
        )
    ]
    if accounts.collectionAuthorityRecord != nil {
        
        keys.append(
            AccountMeta(
                publicKey: accounts.collectionAuthorityRecord!,
                isSigner: false,
                isWritable: false
            )
        )
    }

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}