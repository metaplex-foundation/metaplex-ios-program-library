/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category MintNewEditionFromMasterEditionViaVaultProxy
 * @category generated
 */
public struct MintNewEditionFromMasterEditionViaVaultProxyInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let mintNewEditionFromMasterEditionViaTokenArgs: MintNewEditionFromMasterEditionViaTokenArgs

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = mintNewEditionFromMasterEditionViaVaultProxyInstructionDiscriminator,
        mintNewEditionFromMasterEditionViaTokenArgs: MintNewEditionFromMasterEditionViaTokenArgs
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.mintNewEditionFromMasterEditionViaTokenArgs = mintNewEditionFromMasterEditionViaTokenArgs
    }
}
/**
 * @category Instructions
 * @category MintNewEditionFromMasterEditionViaVaultProxy
 * @category generated
 */
public let MintNewEditionFromMasterEditionViaVaultProxyStruct = FixableBeetArgsStruct<MintNewEditionFromMasterEditionViaVaultProxyInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("mintNewEditionFromMasterEditionViaTokenArgs", mintNewEditionFromMasterEditionViaTokenArgsBeetWrapped)
    ],
    description: "MintNewEditionFromMasterEditionViaVaultProxyInstructionArgs"
)
/**
* Accounts required by the _MintNewEditionFromMasterEditionViaVaultProxy_ instruction
*
* @property [_writable_] newMetadata  
* @property [_writable_] newEdition  
* @property [_writable_] masterEdition  
* @property [_writable_] newMint  
* @property [_writable_] editionMarkPda  
* @property [**signer**] newMintAuthority  
* @property [_writable_, **signer**] payer  
* @property [**signer**] vaultAuthority  
* @property [] safetyDepositStore  
* @property [] safetyDepositBox  
* @property [] vault  
* @property [] newMetadataUpdateAuthority  
* @property [] metadata  
* @property [] tokenVaultProgram   
* @category Instructions
* @category MintNewEditionFromMasterEditionViaVaultProxy
* @category generated
*/
public struct MintNewEditionFromMasterEditionViaVaultProxyInstructionAccounts {
    let newMetadata: PublicKey
    let newEdition: PublicKey
    let masterEdition: PublicKey
    let newMint: PublicKey
    let editionMarkPda: PublicKey
    let newMintAuthority: PublicKey
    let payer: PublicKey
    let vaultAuthority: PublicKey
    let safetyDepositStore: PublicKey
    let safetyDepositBox: PublicKey
    let vault: PublicKey
    let newMetadataUpdateAuthority: PublicKey
    let metadata: PublicKey
    let tokenProgram: PublicKey?
    let tokenVaultProgram: PublicKey
    let systemProgram: PublicKey?
    let rent: PublicKey?

    public init(
        newMetadata: PublicKey,
        newEdition: PublicKey,
        masterEdition: PublicKey,
        newMint: PublicKey,
        editionMarkPda: PublicKey,
        newMintAuthority: PublicKey,
        payer: PublicKey,
        vaultAuthority: PublicKey,
        safetyDepositStore: PublicKey,
        safetyDepositBox: PublicKey,
        vault: PublicKey,
        newMetadataUpdateAuthority: PublicKey,
        metadata: PublicKey,
        tokenProgram: PublicKey? = nil,
        tokenVaultProgram: PublicKey,
        systemProgram: PublicKey? = nil,
        rent: PublicKey? = nil
    ) {
        self.newMetadata = newMetadata
        self.newEdition = newEdition
        self.masterEdition = masterEdition
        self.newMint = newMint
        self.editionMarkPda = editionMarkPda
        self.newMintAuthority = newMintAuthority
        self.payer = payer
        self.vaultAuthority = vaultAuthority
        self.safetyDepositStore = safetyDepositStore
        self.safetyDepositBox = safetyDepositBox
        self.vault = vault
        self.newMetadataUpdateAuthority = newMetadataUpdateAuthority
        self.metadata = metadata
        self.tokenProgram = tokenProgram
        self.tokenVaultProgram = tokenVaultProgram
        self.systemProgram = systemProgram
        self.rent = rent
    }
}

public let mintNewEditionFromMasterEditionViaVaultProxyInstructionDiscriminator = [66, 246, 206, 73, 249, 35, 194, 47] as [UInt8]

/**
* Creates a _MintNewEditionFromMasterEditionViaVaultProxy_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category MintNewEditionFromMasterEditionViaVaultProxy
* @category generated
*/
public func createMintNewEditionFromMasterEditionViaVaultProxyInstruction(accounts: MintNewEditionFromMasterEditionViaVaultProxyInstructionAccounts, 
args: MintNewEditionFromMasterEditionViaVaultProxyInstructionArgs, programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = MintNewEditionFromMasterEditionViaVaultProxyStruct.serialize(
            instance: ["instructionDiscriminator": mintNewEditionFromMasterEditionViaVaultProxyInstructionDiscriminator,
"mintNewEditionFromMasterEditionViaTokenArgs": args.mintNewEditionFromMasterEditionViaTokenArgs])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.newMetadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.newEdition,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.masterEdition,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.newMint,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.editionMarkPda,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.newMintAuthority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.vaultAuthority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.safetyDepositStore,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.safetyDepositBox,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.vault,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.newMetadataUpdateAuthority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenVaultProgram,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}