/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category ThawDelegatedAccount
 * @category generated
 */
public struct ThawDelegatedAccountInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = thawDelegatedAccountInstructionDiscriminator
    ) {
        self.instructionDiscriminator = instructionDiscriminator
    }
}
/**
 * @category Instructions
 * @category ThawDelegatedAccount
 * @category generated
 */
public let ThawDelegatedAccountStruct = FixableBeetArgsStruct<ThawDelegatedAccountInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "ThawDelegatedAccountInstructionArgs"
)
/**
* Accounts required by the _ThawDelegatedAccount_ instruction
*
* @property [_writable_, **signer**] delegate  
* @property [_writable_] tokenAccount  
* @property [] edition  
* @property [] mint   
* @category Instructions
* @category ThawDelegatedAccount
* @category generated
*/
public struct ThawDelegatedAccountInstructionAccounts {
    let delegate: PublicKey
    let tokenAccount: PublicKey
    let edition: PublicKey
    let mint: PublicKey
    let tokenProgram: PublicKey?

    public init(
        delegate: PublicKey,
        tokenAccount: PublicKey,
        edition: PublicKey,
        mint: PublicKey,
        tokenProgram: PublicKey? = nil
    ) {
        self.delegate = delegate
        self.tokenAccount = tokenAccount
        self.edition = edition
        self.mint = mint
        self.tokenProgram = tokenProgram
    }
}

public let thawDelegatedAccountInstructionDiscriminator = [239, 152, 227, 34, 225, 200, 206, 170] as [UInt8]

/**
* Creates a _ThawDelegatedAccount_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category ThawDelegatedAccount
* @category generated
*/
public func createThawDelegatedAccountInstruction(accounts: ThawDelegatedAccountInstructionAccounts, 
programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = ThawDelegatedAccountStruct.serialize(
            instance: ["instructionDiscriminator": thawDelegatedAccountInstructionDiscriminator ])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.delegate,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.tokenAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.edition,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}