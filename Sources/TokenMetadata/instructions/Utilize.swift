/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category Utilize
 * @category generated
 */
public struct UtilizeInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let utilizeArgs: UtilizeArgs

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = utilizeInstructionDiscriminator,
        utilizeArgs: UtilizeArgs
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.utilizeArgs = utilizeArgs
    }
}
/**
 * @category Instructions
 * @category Utilize
 * @category generated
 */
public let UtilizeStruct = FixableBeetArgsStruct<UtilizeInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("utilizeArgs", utilizeArgsBeetWrapped)
    ],
    description: "UtilizeInstructionArgs"
)
/**
* Accounts required by the _Utilize_ instruction
*
* @property [_writable_] metadata  
* @property [_writable_] tokenAccount  
* @property [_writable_] mint  
* @property [_writable_, **signer**] useAuthority  
* @property [] owner  
* @property [_writable_] useAuthorityRecord (optional)  
* @property [] burner (optional)   
* @category Instructions
* @category Utilize
* @category generated
*/
public struct UtilizeInstructionAccounts {
    let metadata: PublicKey
    let tokenAccount: PublicKey
    let mint: PublicKey
    let useAuthority: PublicKey
    let owner: PublicKey
    let tokenProgram: PublicKey?
    let ataProgram: PublicKey?
    let systemProgram: PublicKey?
    let rent: PublicKey?
    let useAuthorityRecord: PublicKey?
    let burner: PublicKey?

    public init(
        metadata: PublicKey,
        tokenAccount: PublicKey,
        mint: PublicKey,
        useAuthority: PublicKey,
        owner: PublicKey,
        tokenProgram: PublicKey? = nil,
        ataProgram: PublicKey? = nil,
        systemProgram: PublicKey? = nil,
        rent: PublicKey? = nil,
        useAuthorityRecord: PublicKey? = nil,
        burner: PublicKey? = nil
    ) {
        self.metadata = metadata
        self.tokenAccount = tokenAccount
        self.mint = mint
        self.useAuthority = useAuthority
        self.owner = owner
        self.tokenProgram = tokenProgram
        self.ataProgram = ataProgram
        self.systemProgram = systemProgram
        self.rent = rent
        self.useAuthorityRecord = useAuthorityRecord
        self.burner = burner
    }
}

public let utilizeInstructionDiscriminator = [104, 146, 242, 209, 176, 174, 185, 163] as [UInt8]

/**
* Creates a _Utilize_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category Utilize
* @category generated
*/
public func createUtilizeInstruction(accounts: UtilizeInstructionAccounts, 
args: UtilizeInstructionArgs, programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = UtilizeStruct.serialize(
            instance: ["instructionDiscriminator": utilizeInstructionDiscriminator,
"utilizeArgs": args.utilizeArgs])

    var keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.tokenAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.useAuthority,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.owner,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.ataProgram ?? PublicKey.splAssociatedTokenAccountProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        )
    ]
    if accounts.useAuthorityRecord != nil {
        
        keys.append(
            AccountMeta(
                publicKey: accounts.useAuthorityRecord!,
                isSigner: false,
                isWritable: true
            )
        )
    }
    if accounts.burner != nil {
        if accounts.useAuthorityRecord == nil { fatalError("When providing burner accounts.useAuthorityRecord need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.burner!,
                isSigner: false,
                isWritable: false
            )
        )
    }

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}