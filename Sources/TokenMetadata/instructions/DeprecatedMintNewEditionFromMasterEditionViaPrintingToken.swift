/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category DeprecatedMintNewEditionFromMasterEditionViaPrintingToken
 * @category generated
 */
public struct DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = deprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDiscriminator
    ) {
        self.instructionDiscriminator = instructionDiscriminator
    }
}
/**
 * @category Instructions
 * @category DeprecatedMintNewEditionFromMasterEditionViaPrintingToken
 * @category generated
 */
public let DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenStruct = FixableBeetArgsStruct<DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionArgs"
)
/**
* Accounts required by the _DeprecatedMintNewEditionFromMasterEditionViaPrintingToken_ instruction
*
* @property [_writable_] metadata  
* @property [_writable_] edition  
* @property [_writable_] masterEdition  
* @property [_writable_] mint  
* @property [**signer**] mintAuthority  
* @property [_writable_] printingMint  
* @property [_writable_] masterTokenAccount  
* @property [_writable_] editionMarker  
* @property [**signer**] burnAuthority  
* @property [**signer**] payer  
* @property [] masterUpdateAuthority  
* @property [] masterMetadata  
* @property [_writable_] reservationList (optional)   
* @category Instructions
* @category DeprecatedMintNewEditionFromMasterEditionViaPrintingToken
* @category generated
*/
public struct DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionAccounts {
    let metadata: PublicKey
    let edition: PublicKey
    let masterEdition: PublicKey
    let mint: PublicKey
    let mintAuthority: PublicKey
    let printingMint: PublicKey
    let masterTokenAccount: PublicKey
    let editionMarker: PublicKey
    let burnAuthority: PublicKey
    let payer: PublicKey
    let masterUpdateAuthority: PublicKey
    let masterMetadata: PublicKey
    let tokenProgram: PublicKey?
    let systemProgram: PublicKey?
    let rent: PublicKey?
    let reservationList: PublicKey?

    public init(
        metadata: PublicKey,
        edition: PublicKey,
        masterEdition: PublicKey,
        mint: PublicKey,
        mintAuthority: PublicKey,
        printingMint: PublicKey,
        masterTokenAccount: PublicKey,
        editionMarker: PublicKey,
        burnAuthority: PublicKey,
        payer: PublicKey,
        masterUpdateAuthority: PublicKey,
        masterMetadata: PublicKey,
        tokenProgram: PublicKey? = nil,
        systemProgram: PublicKey? = nil,
        rent: PublicKey? = nil,
        reservationList: PublicKey? = nil
    ) {
        self.metadata = metadata
        self.edition = edition
        self.masterEdition = masterEdition
        self.mint = mint
        self.mintAuthority = mintAuthority
        self.printingMint = printingMint
        self.masterTokenAccount = masterTokenAccount
        self.editionMarker = editionMarker
        self.burnAuthority = burnAuthority
        self.payer = payer
        self.masterUpdateAuthority = masterUpdateAuthority
        self.masterMetadata = masterMetadata
        self.tokenProgram = tokenProgram
        self.systemProgram = systemProgram
        self.rent = rent
        self.reservationList = reservationList
    }
}

public let deprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDiscriminator = [154, 36, 174, 111, 190, 80, 155, 228] as [UInt8]

/**
* Creates a _DeprecatedMintNewEditionFromMasterEditionViaPrintingToken_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category DeprecatedMintNewEditionFromMasterEditionViaPrintingToken
* @category generated
*/
public func createDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstruction(accounts: DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionAccounts, 
programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenStruct.serialize(
            instance: ["instructionDiscriminator": deprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDiscriminator ])

    var keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.edition,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.masterEdition,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.mintAuthority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.printingMint,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.masterTokenAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.editionMarker,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.burnAuthority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.masterUpdateAuthority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.masterMetadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        )
    ]
    if accounts.reservationList != nil {
        
        keys.append(
            AccountMeta(
                publicKey: accounts.reservationList!,
                isSigner: false,
                isWritable: true
            )
        )
    }

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}