/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category RevokeCollectionAuthority
 * @category generated
 */
public struct RevokeCollectionAuthorityInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = revokeCollectionAuthorityInstructionDiscriminator
    ) {
        self.instructionDiscriminator = instructionDiscriminator
    }
}
/**
 * @category Instructions
 * @category RevokeCollectionAuthority
 * @category generated
 */
public let RevokeCollectionAuthorityStruct = FixableBeetArgsStruct<RevokeCollectionAuthorityInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "RevokeCollectionAuthorityInstructionArgs"
)
/**
* Accounts required by the _RevokeCollectionAuthority_ instruction
*
* @property [_writable_] collectionAuthorityRecord  
* @property [_writable_, **signer**] delegateAuthority  
* @property [_writable_, **signer**] revokeAuthority  
* @property [] metadata  
* @property [] mint   
* @category Instructions
* @category RevokeCollectionAuthority
* @category generated
*/
public struct RevokeCollectionAuthorityInstructionAccounts {
    let collectionAuthorityRecord: PublicKey
    let delegateAuthority: PublicKey
    let revokeAuthority: PublicKey
    let metadata: PublicKey
    let mint: PublicKey

    public init(
        collectionAuthorityRecord: PublicKey,
        delegateAuthority: PublicKey,
        revokeAuthority: PublicKey,
        metadata: PublicKey,
        mint: PublicKey
    ) {
        self.collectionAuthorityRecord = collectionAuthorityRecord
        self.delegateAuthority = delegateAuthority
        self.revokeAuthority = revokeAuthority
        self.metadata = metadata
        self.mint = mint
    }
}

public let revokeCollectionAuthorityInstructionDiscriminator = [31, 139, 135, 198, 29, 48, 160, 154] as [UInt8]

/**
* Creates a _RevokeCollectionAuthority_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category RevokeCollectionAuthority
* @category generated
*/
public func createRevokeCollectionAuthorityInstruction(accounts: RevokeCollectionAuthorityInstructionAccounts, 
programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = RevokeCollectionAuthorityStruct.serialize(
            instance: ["instructionDiscriminator": revokeCollectionAuthorityInstructionDiscriminator ])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.collectionAuthorityRecord,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.delegateAuthority,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.revokeAuthority,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}