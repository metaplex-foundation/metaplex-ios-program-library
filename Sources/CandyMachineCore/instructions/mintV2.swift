/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category MintV2
 * @category generated
 */
public struct MintV2InstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = mintV2InstructionDiscriminator
    ) {
        self.instructionDiscriminator = instructionDiscriminator
    }
}
/**
 * @category Instructions
 * @category MintV2
 * @category generated
 */
public let mintV2Struct = FixableBeetArgsStruct<MintV2InstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "MintV2InstructionArgs"
)
/**
* Accounts required by the _mintV2_ instruction
*
* @property [_writable_] candyMachine  
* @property [_writable_] authorityPda  
* @property [**signer**] mintAuthority  
* @property [_writable_, **signer**] payer  
* @property [] nftOwner  
* @property [_writable_] nftMint  
* @property [**signer**] nftMintAuthority  
* @property [_writable_] nftMetadata  
* @property [_writable_] nftMasterEdition  
* @property [_writable_] token  
* @property [_writable_] tokenRecord  
* @property [] collectionDelegateRecord  
* @property [] collectionMint  
* @property [_writable_] collectionMetadata  
* @property [] collectionMasterEdition  
* @property [] collectionUpdateAuthority  
* @property [] tokenMetadataProgram  
* @property [] splTokenProgram  
* @property [] splAtaProgram  
* @property [] sysvarInstructions  
* @property [] recentSlothashes  
* @property [] authorizationRulesProgram  
* @property [] authorizationRules   
* @category Instructions
* @category MintV2
* @category generated
*/
public struct MintV2InstructionAccounts {
    let candyMachine: PublicKey
    let authorityPda: PublicKey
    let mintAuthority: PublicKey
    let payer: PublicKey
    let nftOwner: PublicKey
    let nftMint: PublicKey
    let nftMintAuthority: PublicKey
    let nftMetadata: PublicKey
    let nftMasterEdition: PublicKey
    let token: PublicKey
    let tokenRecord: PublicKey
    let collectionDelegateRecord: PublicKey
    let collectionMint: PublicKey
    let collectionMetadata: PublicKey
    let collectionMasterEdition: PublicKey
    let collectionUpdateAuthority: PublicKey
    let tokenMetadataProgram: PublicKey
    let splTokenProgram: PublicKey
    let splAtaProgram: PublicKey
    let systemProgram: PublicKey?
    let sysvarInstructions: PublicKey
    let recentSlothashes: PublicKey
    let authorizationRulesProgram: PublicKey
    let authorizationRules: PublicKey

    public init(
        candyMachine: PublicKey,
        authorityPda: PublicKey,
        mintAuthority: PublicKey,
        payer: PublicKey,
        nftOwner: PublicKey,
        nftMint: PublicKey,
        nftMintAuthority: PublicKey,
        nftMetadata: PublicKey,
        nftMasterEdition: PublicKey,
        token: PublicKey,
        tokenRecord: PublicKey,
        collectionDelegateRecord: PublicKey,
        collectionMint: PublicKey,
        collectionMetadata: PublicKey,
        collectionMasterEdition: PublicKey,
        collectionUpdateAuthority: PublicKey,
        tokenMetadataProgram: PublicKey,
        splTokenProgram: PublicKey,
        splAtaProgram: PublicKey,
        systemProgram: PublicKey? = nil,
        sysvarInstructions: PublicKey,
        recentSlothashes: PublicKey,
        authorizationRulesProgram: PublicKey,
        authorizationRules: PublicKey
    ) {
        self.candyMachine = candyMachine
        self.authorityPda = authorityPda
        self.mintAuthority = mintAuthority
        self.payer = payer
        self.nftOwner = nftOwner
        self.nftMint = nftMint
        self.nftMintAuthority = nftMintAuthority
        self.nftMetadata = nftMetadata
        self.nftMasterEdition = nftMasterEdition
        self.token = token
        self.tokenRecord = tokenRecord
        self.collectionDelegateRecord = collectionDelegateRecord
        self.collectionMint = collectionMint
        self.collectionMetadata = collectionMetadata
        self.collectionMasterEdition = collectionMasterEdition
        self.collectionUpdateAuthority = collectionUpdateAuthority
        self.tokenMetadataProgram = tokenMetadataProgram
        self.splTokenProgram = splTokenProgram
        self.splAtaProgram = splAtaProgram
        self.systemProgram = systemProgram
        self.sysvarInstructions = sysvarInstructions
        self.recentSlothashes = recentSlothashes
        self.authorizationRulesProgram = authorizationRulesProgram
        self.authorizationRules = authorizationRules
    }
}

public let mintV2InstructionDiscriminator = [120, 121, 23, 146, 173, 110, 199, 205] as [UInt8]

/**
* Creates a _MintV2_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category MintV2
* @category generated
*/
public func createMintV2Instruction(accounts: MintV2InstructionAccounts, 
programId: PublicKey=PublicKey(string: "CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR")!) -> TransactionInstruction {

    let data = mintV2Struct.serialize(
            instance: ["instructionDiscriminator": mintV2InstructionDiscriminator ])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.candyMachine,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.authorityPda,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.mintAuthority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.nftOwner,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.nftMint,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.nftMintAuthority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.nftMetadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.nftMasterEdition,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.token,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.tokenRecord,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.collectionDelegateRecord,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionMint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionMetadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.collectionMasterEdition,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionUpdateAuthority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenMetadataProgram,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.splTokenProgram,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.splAtaProgram,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.sysvarInstructions,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.recentSlothashes,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.authorizationRulesProgram,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.authorizationRules,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}