/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category SetCollectionDuringMint
 * @category generated
 */
public struct SetCollectionDuringMintInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = setCollectionDuringMintInstructionDiscriminator
    ) {
        self.instructionDiscriminator = instructionDiscriminator
    }
}
/**
 * @category Instructions
 * @category SetCollectionDuringMint
 * @category generated
 */
public let setCollectionDuringMintStruct = FixableBeetArgsStruct<SetCollectionDuringMintInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "SetCollectionDuringMintInstructionArgs"
)
/**
* Accounts required by the _setCollectionDuringMint_ instruction
*
* @property [] candyMachine  
* @property [] metadata  
* @property [**signer**] payer  
* @property [_writable_] collectionPda  
* @property [] tokenMetadataProgram  
* @property [] instructions  
* @property [] collectionMint  
* @property [] collectionMetadata  
* @property [] collectionMasterEdition  
* @property [] authority  
* @property [] collectionAuthorityRecord   
* @category Instructions
* @category SetCollectionDuringMint
* @category generated
*/
public struct SetCollectionDuringMintInstructionAccounts {
    let candyMachine: PublicKey
    let metadata: PublicKey
    let payer: PublicKey
    let collectionPda: PublicKey
    let tokenMetadataProgram: PublicKey
    let instructions: PublicKey
    let collectionMint: PublicKey
    let collectionMetadata: PublicKey
    let collectionMasterEdition: PublicKey
    let authority: PublicKey
    let collectionAuthorityRecord: PublicKey

    public init(
        candyMachine: PublicKey,
        metadata: PublicKey,
        payer: PublicKey,
        collectionPda: PublicKey,
        tokenMetadataProgram: PublicKey,
        instructions: PublicKey,
        collectionMint: PublicKey,
        collectionMetadata: PublicKey,
        collectionMasterEdition: PublicKey,
        authority: PublicKey,
        collectionAuthorityRecord: PublicKey
    ) {
        self.candyMachine = candyMachine
        self.metadata = metadata
        self.payer = payer
        self.collectionPda = collectionPda
        self.tokenMetadataProgram = tokenMetadataProgram
        self.instructions = instructions
        self.collectionMint = collectionMint
        self.collectionMetadata = collectionMetadata
        self.collectionMasterEdition = collectionMasterEdition
        self.authority = authority
        self.collectionAuthorityRecord = collectionAuthorityRecord
    }
}

public let setCollectionDuringMintInstructionDiscriminator = [103, 17, 200, 25, 118, 95, 125, 61] as [UInt8]

/**
* Creates a _SetCollectionDuringMint_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category SetCollectionDuringMint
* @category generated
*/
public func createSetCollectionDuringMintInstruction(accounts: SetCollectionDuringMintInstructionAccounts, 
programId: PublicKey=PublicKey(string: "cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")!) -> TransactionInstruction {

    let data = setCollectionDuringMintStruct.serialize(
            instance: ["instructionDiscriminator": setCollectionDuringMintInstructionDiscriminator ])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.candyMachine,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionPda,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.tokenMetadataProgram,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.instructions,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionMint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionMetadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionMasterEdition,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionAuthorityRecord,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}