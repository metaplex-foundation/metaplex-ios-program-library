/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category SetCollection
 * @category generated
 */
public struct SetCollectionInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    
}
/**
 * @category Instructions
 * @category SetCollection
 * @category generated
 */
public let setCollectionStruct = FixableBeetArgsStruct<SetCollectionInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "SetCollectionInstructionArgs"
)
/**
* Accounts required by the _setCollection_ instruction
*
* @property [_writable_] candyMachine  
* @property [**signer**] authority  
* @property [_writable_] collectionPda  
* @property [**signer**] payer  
* @property [] metadata  
* @property [] mint  
* @property [] edition  
* @property [_writable_] collectionAuthorityRecord  
* @property [] tokenMetadataProgram   
* @category Instructions
* @category SetCollection
* @category generated
*/
public struct SetCollectionInstructionAccounts {
        let candyMachine: PublicKey
        let authority: PublicKey
        let collectionPda: PublicKey
        let payer: PublicKey
        let systemProgram: PublicKey?
        let rent: PublicKey?
        let metadata: PublicKey
        let mint: PublicKey
        let edition: PublicKey
        let collectionAuthorityRecord: PublicKey
        let tokenMetadataProgram: PublicKey
}

public let setCollectionInstructionDiscriminator = [103, 108, 111, 98, 97, 108, 58, 115] as [UInt8]

/**
* Creates a _SetCollection_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category SetCollection
* @category generated
*/
public func createSetCollectionInstruction(accounts: SetCollectionInstructionAccounts, 
programId: PublicKey=PublicKey(string: "")!) -> TransactionInstruction {

    let data = setCollectionStruct.serialize(
            instance: ["instructionDiscriminator": setCollectionInstructionDiscriminator ])

    let keys: [Account.Meta] = [
        Account.Meta(
            publicKey: accounts.candyMachine,
            isSigner: false,
            isWritable: true
        ),
        Account.Meta(
            publicKey: accounts.authority,
            isSigner: true,
            isWritable: false
        ),
        Account.Meta(
            publicKey: accounts.collectionPda,
            isSigner: false,
            isWritable: true
        ),
        Account.Meta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: false
        ),
        Account.Meta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        Account.Meta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        ),
        Account.Meta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: false
        ),
        Account.Meta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: false
        ),
        Account.Meta(
            publicKey: accounts.edition,
            isSigner: false,
            isWritable: false
        ),
        Account.Meta(
            publicKey: accounts.collectionAuthorityRecord,
            isSigner: false,
            isWritable: true
        ),
        Account.Meta(
            publicKey: accounts.tokenMetadataProgram,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}