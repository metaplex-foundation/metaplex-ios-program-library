/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category RemoveCollection
 * @category generated
 */
public struct RemoveCollectionInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = removeCollectionInstructionDiscriminator
    ) {
        self.instructionDiscriminator = instructionDiscriminator
    }
}
/**
 * @category Instructions
 * @category RemoveCollection
 * @category generated
 */
public let removeCollectionStruct = FixableBeetArgsStruct<RemoveCollectionInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "RemoveCollectionInstructionArgs"
)
/**
* Accounts required by the _removeCollection_ instruction
*
* @property [_writable_] candyMachine  
* @property [**signer**] authority  
* @property [_writable_] collectionPda  
* @property [] metadata  
* @property [] mint  
* @property [_writable_] collectionAuthorityRecord  
* @property [] tokenMetadataProgram   
* @category Instructions
* @category RemoveCollection
* @category generated
*/
public struct RemoveCollectionInstructionAccounts {
    let candyMachine: PublicKey
    let authority: PublicKey
    let collectionPda: PublicKey
    let metadata: PublicKey
    let mint: PublicKey
    let collectionAuthorityRecord: PublicKey
    let tokenMetadataProgram: PublicKey

    public init(
        candyMachine: PublicKey,
        authority: PublicKey,
        collectionPda: PublicKey,
        metadata: PublicKey,
        mint: PublicKey,
        collectionAuthorityRecord: PublicKey,
        tokenMetadataProgram: PublicKey
    ) {
        self.candyMachine = candyMachine
        self.authority = authority
        self.collectionPda = collectionPda
        self.metadata = metadata
        self.mint = mint
        self.collectionAuthorityRecord = collectionAuthorityRecord
        self.tokenMetadataProgram = tokenMetadataProgram
    }
}

public let removeCollectionInstructionDiscriminator = [223, 52, 106, 217, 61, 220, 36, 160] as [UInt8]

/**
* Creates a _RemoveCollection_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category RemoveCollection
* @category generated
*/
public func createRemoveCollectionInstruction(accounts: RemoveCollectionInstructionAccounts, 
programId: PublicKey=PublicKey(string: "")!) -> TransactionInstruction {

    let data = removeCollectionStruct.serialize(
            instance: ["instructionDiscriminator": removeCollectionInstructionDiscriminator ])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.candyMachine,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionPda,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.collectionAuthorityRecord,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.tokenMetadataProgram,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}