/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category AddConfigLines
 * @category generated
 */
public struct AddConfigLinesInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let index: UInt32
    let configLines: [ConfigLine]
}
/**
 * @category Instructions
 * @category AddConfigLines
 * @category generated
 */
public let addConfigLinesStruct = FixableBeetArgsStruct<AddConfigLinesInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("index", Beet.fixedBeet(.init(value: .scalar(u32())))),
        ("configLines", Beet.fixableBeat(array(element: configLineBeetWrapped)))
    ],
    description: "AddConfigLinesInstructionArgs"
)
/**
* Accounts required by the _addConfigLines_ instruction
*
* @property [_writable_] candyMachine  
* @property [**signer**] authority   
* @category Instructions
* @category AddConfigLines
* @category generated
*/
public struct AddConfigLinesInstructionAccounts {
        let candyMachine: PublicKey
        let authority: PublicKey
}

public let addConfigLinesInstructionDiscriminator = [103, 108, 111, 98, 97, 108, 58, 97] as [UInt8]

/**
* Creates a _AddConfigLines_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category AddConfigLines
* @category generated
*/
public func createAddConfigLinesInstruction(accounts: AddConfigLinesInstructionAccounts, 
args: AddConfigLinesInstructionArgs, programId: PublicKey=PublicKey(string: "")!) -> TransactionInstruction {

    let data = addConfigLinesStruct.serialize(
            instance: ["instructionDiscriminator": addConfigLinesInstructionDiscriminator,
"index": args.index,
  "configLines": args.configLines])

    let keys: [Account.Meta] = [
        Account.Meta(
            publicKey: accounts.candyMachine,
            isSigner: false,
            isWritable: true
        ),
        Account.Meta(
            publicKey: accounts.authority,
            isSigner: true,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}