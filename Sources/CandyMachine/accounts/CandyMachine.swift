/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import BeetSolana
import Solana
import Beet


/**
* Arguments used to create {@link Candymachine}
* @category Accounts
* @category generated
*/
public protocol CandymachineArgs {
    var candyMachineDiscriminator: [UInt8] { get }
     var authority: PublicKey { get }
     var wallet: PublicKey { get }
     var tokenMint: COption<PublicKey> { get }
     var itemsRedeemed: UInt64 { get }
     var data: CandyMachineData { get }
}

/**
 * Holds the data for the {@link Candymachine} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
public struct Candymachine: CandymachineArgs {
  public static let candyMachineDiscriminator = [51, 173, 177, 113, 25, 241, 109, 189] as [UInt8]

  public let candyMachineDiscriminator: [UInt8]
  public let authority: PublicKey
  public let wallet: PublicKey
  public let tokenMint: COption<PublicKey>
  public let itemsRedeemed: UInt64
  public let data: CandyMachineData

  /**
   * Creates a {@link Candymachine} instance from the provided args.
   */
  public static func fromArgs(args: Args) -> Candymachine {
    return Candymachine(
        candyMachineDiscriminator: args["accountDiscriminator"] as! [UInt8],
        authority: args["authority"] as! PublicKey,
        wallet: args["wallet"] as! PublicKey,
        tokenMint: args["tokenMint"] as! COption<PublicKey>,
        itemsRedeemed: args["itemsRedeemed"] as! UInt64,
        data: args["data"] as! CandyMachineData
    )
  }
  /**
   * Deserializes the {@link Candymachine} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func fromAccountInfo(
    accountInfo: Foundation.Data,
    offset:Int=0
  ) -> ( Candymachine, Int )  {
    return Candymachine.deserialize(buf: accountInfo, offset: offset)
  }
  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Candymachine} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  public static func fromAccountAddress(
    connection: Api,
    address: PublicKey,
    onComplete: @escaping (Result<Candymachine, Error>) -> Void
  ) {
    connection.getAccountInfo(account: address.base58EncodedString) { result in
        switch result {
            case .success(let pureData):
                if let data = pureData.data?.value {
                    onComplete(.success(Candymachine.deserialize(buf: data).0))
                } else {
                    onComplete(.failure(SolanaError.nullValue))
                }
            case .failure(let error):
                onComplete(.failure(error))
        }
    }
  }
  /**
   * Deserializes the {@link Candymachine} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func deserialize(
    buf: Foundation.Data,
    offset: Int = 0
  ) -> ( Candymachine, Int ) {
    return candyMachineBeet.deserialize(buffer: buf, offset: offset)
  }
  /**
   * Serializes the {@link Candymachine} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  public func serialize() -> ( Foundation.Data, Int ) {
    return candyMachineBeet.serialize(instance: [
        "candyMachineDiscriminator" : self.candyMachineDiscriminator,
        "authority" : self.authority,
        "wallet" : self.wallet,
        "tokenMint" : self.tokenMint,
        "itemsRedeemed" : self.itemsRedeemed,
        "data" : self.data
        ])
  }
  /**
* Returns the byteSize of a {@link Buffer} holding the serialized data of
* {@link Candymachine} for the provided args.
*
* @param args need to be provided since the byte size for this account
* depends on them
*/
static func byteSize(args: CandymachineArgs) -> UInt64 {
    return UInt64(candyMachineBeet.toFixedFromValue(val: args).byteSize)
}
/**
* Fetches the minimum balance needed to exempt an account holding
* {@link Candymachine} data from rent
*
* @param args need to be provided since the byte size for this account
* depends on them
* @param connection used to retrieve the rent exemption information
*/
static func getMinimumBalanceForRentExemption(
    args: CandymachineArgs,
    connection: Api,
    commitment: Commitment?,
    onComplete: @escaping(Result<UInt64, Error>) -> Void
) {
    return connection.getMinimumBalanceForRentExemption(dataLength: Candymachine.byteSize(args: args), commitment: commitment, onComplete: onComplete)
}
}
  /**
   * @category Accounts
   * @category generated
   */
  public let candyMachineBeet = FixableBeetStruct<Candymachine>(
    fields:[
        ("accountDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("authority", Beet.fixedBeet(.init(value: .scalar(BeetPublicKey())))),
        ("wallet", Beet.fixedBeet(.init(value: .scalar(BeetPublicKey())))),
        ("tokenMint", Beet.fixableBeat(coption(inner: Beet.fixedBeet(.init(value: .scalar(BeetPublicKey())))))),
        ("itemsRedeemed", Beet.fixedBeet(.init(value: .scalar(u64())))),
        ("data", candyMachineDataBeetWrapped)
    ],
    construct: Candymachine.fromArgs,
    description: "Candymachine"
)
